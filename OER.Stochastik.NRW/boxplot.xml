<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<question type="stack">
        <name>
            <text>Boxplot</text>
        </name>
        <questiontext format="html">
            <text><![CDATA[
<span class="multilang" lang="de">
    <style>
        .buttonweiter {
                                border: 1px solid black;
                                background-color: #a9f5bc;
                }

    
    
    
    .buttonweiter:hover {
                                background-color: #e0f8e6;
                }

    
    
    
    .buttonzurueck {
                                border: 1px solid black;
                                background-color: #dcb25e;
                }

    
    
    
    .buttonzurueck:hover {
                                background-color: #e7d2a7;
                }

    
    
    
    .popover_erklaerung {
                                color: #0f6fc5;
                }

    
    
    
    .popover_erklaerung:hover {
                                color: #0a477e;
                                text-decoration: underline;
                }

    
    
    
    .copytoclipboard {
                                cursor: copy;
                }
    </style>
    <div id="oer-aufgabe-23_aufgabe1">
        <p>
            In der Abbildung sehen Sie einen Boxplot.
            <br/>
            Bitte geben Sie eine Liste von mindestens acht unterschiedlichen reellen
                                Zahlen an, sodass der Boxplot diesen Datensatz beschreibt. Klicken Sie
                                dann auf "Pr&#252;fen".
        </p>
        <p>
            <i>
                Wenn Sie mit der Maus &#252;ber die einzelnen Kennwerte des Boxplots
                                                fahren, werden deren Werte eingeblendet. Auf Touch-Screens m&#252;ssen
                                                die Kennwerte angetippt werden.
            </i>
        </p>
        [[jsxgraph height='200px']]
                                const boxplotColor = '#0000bb'; //Farbe des unteren Boxplots: blau
                                const boxplot_height = 1.6; // H&#246;he des Boxplots
                                const antennen_height = 0.8; // H&#246;he der Antennen des Boxplots

        
        
        
        const board = JXG.JSXGraph.initBoard(divid, {
                                                axis:true,
                                                boundingbox: [{#mini-0.2*ampl#}, 2, {#maxi+0.2*ampl#}, -2],
                                                showCopyright:false,
                                                showNavigation:false,
                                                zoom:{enabled:false},
                                                pan:{enabled:false},
                                                defaultAxes:{
                                                                x:{lastArrow:false,
                                                                                ticks:{drawZero:true}
                                                                },
                                                                y:{lastArrow:false,
                                                                                visible:false,
                                                                                ticks:{drawLabels:false, drawZero:true}
                                                                }
                                                }
                                });

        
        
        
        const pol = board.create('point',[{#uquantil#},function(){return boxplot_height/2}],{visible:false,fixed:true});
                                const pul = board.create('point',[{#uquantil#},function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
                                const por = board.create('point',[{#oquantil#},function(){return boxplot_height/2}],{visible:false,fixed:true});
                                const pur = board.create('point',[{#oquantil#},function(){return 0-boxplot_height/2}],{visible:false,fixed:true});

        
        
        
        // === Linke Antenne ===
                                const grenze_links_text = board.create('text',[{#antenne_links-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+{#antenne_links#}}],{visible:false,fixed:true,color:boxplotColor});
                                const grenze_links = board.create('segment',[[{#antenne_links#},function(){return 0-antennen_height/2}],[{#antenne_links#},function(){return 0+antennen_height/2}]],{
                                                fixed:true,
                                                strokeWidth:3,
                                                strokeColor:boxplotColor
                                });
            
                    
                    
                    
        // Eventlistener f&#252;r Maus-Hovering
                                grenze_links.on('over', function(e){
                                                grenze_links_text.setAttribute({visible:true});
                                });
                                grenze_links.on('out', function(e){
                                                grenze_links_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let grenze_linksActive = false;
                                grenze_links.on('down', function(e){
                                                if(grenze_linksActive){
                                                                grenze_links_text.setAttribute({visible:false});
                                                } else{
                                                                grenze_links_text.setAttribute({visible:true});
                                                }
                                                grenze_linksActive = !grenze_linksActive;
                                });

        
        
        
        // === Rechte Antenne ===
                                const grenze_rechts_text = board.create('text',[{#antenne_rechts-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+{#antenne_rechts#}}],{visible:false,fixed:true,color:boxplotColor});
                                const grenze_rechts = board.create('segment',[[{#antenne_rechts#},function(){return 0-antennen_height/2}],[{#antenne_rechts#},function(){return 0+antennen_height/2}]],{
                                                fixed:true,
                                                strokeWidth:3,
                                                strokeColor:boxplotColor
                                });
                                // Eventlistener f&#252;r Maus-Hovering
                                grenze_rechts.on('over', function(e){
                                                grenze_rechts_text.setAttribute({visible:true});
                                });
                                grenze_rechts.on('out', function(e){
                                                grenze_rechts_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                const grenze_rechtsActive = false;
                                grenze_rechts.on('down', function(e){
                                                if(grenze_rechtsActive){
                                                                grenze_rechts_text.setAttribute({visible:false});
                                                } else{
                                                                grenze_rechts_text.setAttribute({visible:true});
                                                }
                                                grenze_rechtsActive = !grenze_rechtsActive;
                                });

        
        
        
        // === Grundlinien ===
                                const grundlinie_links = board.create('segment',[[{#antenne_links#},0],[{#uquantil#},0]],{
                                                fixed:true,
                                                strokeColor:boxplotColor,
                                                highlight:false
                                });
                                const grundlinie_rechts = board.create('segment',[[{#oquantil#},0],[{#antenne_rechts#},0]],{
                                                fixed:true,
                                                strokeColor:boxplotColor,
                                                highlight:false
                                });

        
        
        
        // === Median ===
                                const median_text = board.create('text',[{#med-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+{#med#}}],{visible:false,fixed:true,color:boxplotColor});
                                const median = board.create('segment',[[{#med#},function(){return 0-boxplot_height/2}],[{#med#},function(){return 0+boxplot_height/2}]],{
                                                fixed:true,
                                                strokeColor:boxplotColor
                                });
                                // Eventlistener f&#252;r Maus-Hovering
                                median.on('over', function(e){
                                                median_text.setAttribute({visible:true});
                                });
                                median.on('out', function(e){
                                                median_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let medianActive = false;
                                median.on('down', function(e){
                                                if(medianActive){
                                                                median_text.setAttribute({visible:false});
                                                } else{
                                                                median_text.setAttribute({visible:true});
                                                }
                                                medianActive = !medianActive;
                                });

        
        
        
        // === Box ===
                                const uquantil_text = board.create('text',[{#uquantil-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+{#uquantil#}}],{visible:false,fixed:true,color:boxplotColor});
                                const oquantil_text = board.create('text',[{#oquantil-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+{#oquantil#}}],{visible:false,fixed:true,color:boxplotColor});
                                const box = board.create('polygon',[pol,por,pur,pul],{
                                                                fillColor:boxplotColor,
                                                                highlight:false,
                                                                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:boxplotColor}
                                });
                                box.borders[2].setAttribute({highlight:false});
                                box.borders[0].setAttribute({highlight:false});
                                // Eventlistener f&#252;r Mouse-Hovering
                                box.borders[3].on('over', function(e){
                                                uquantil_text.setAttribute({visible:true});
                                });
                                box.borders[3].on('out', function(e){
                                                uquantil_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let uquantilActive = false;
                                box.borders[3].on('down', function(e){
                                                if(uquantilActive){
                                                                uquantil_text.setAttribute({visible:false});
                                                } else{
                                                                uquantil_text.setAttribute({visible:true});
                                                }
                                                uquantilActive = !uquantilActive;
                                });
                                // Eventlistener f&#252;r Mouse-Hovering
                                box.borders[1].on('over', function(e){
                                                oquantil_text.setAttribute({visible:true});
                                });
                                box.borders[1].on('out', function(e){
                                                oquantil_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let oquantilActive = false;
                                box.borders[1].on('down', function(e){
                                                if(oquantilActive){
                                                                oquantil_text.setAttribute({visible:false});
                                                } else{
                                                                oquantil_text.setAttribute({visible:true});
                                                }
                                                oquantilActive = !oquantilActive;
                                });
                [[/jsxgraph]]
        <p>
            Antwort:
        </p>
        <div id="oer-aufgabe-23_stack_input1">
            [[input:ans1]] [[validation:ans1]]
        </div>
        <!-- Kopie der ersten Antwort -->
        <div id="oer-aufgabe-23_stack_input1_copy" style="display: none">
            [[input:ans1_copy]] [[validation:ans1_copy]]
        </div>
        <p>
            <i>
                Hinweis: Bitte geben Sie die Liste mit eckigen Klammern an, z. B.
            </i>
            <code>
                [1,2,3]
            </code>
        </p>
    </div>
    <div id="oer-aufgabe-23_aufgabe1_prt">
        [[feedback:prt1]]
    </div>
    <div id="oer-aufgabe-23_weiterfuehrende_aufgabe" style="display: none">
        <br/>
        <br/>
        <p>
            Oben sehen Sie, welche Kennwerte des
            <span class="oer-aufgabe-23_farbe_oben">
                Boxplots aus Ihrem Datensatz
            </span>
            nicht mit denen des
            <span class="oer-aufgabe-23_farbe_unten">
                Boxplots aus der Aufgabenstellung
            </span>
            &#252;bereinstimmen.
        </p>
        <p>
            Lesen Sie nun in der Grafik die Werte beider Boxplots ab, die nicht
                                &#252;bereinstimmen. F&#252;llen Sie dann die folgende Tabelle aus:
        </p>
        <div id="oer-aufgabe-23_tabelle_vergleich">
            <div style="overflow-x: auto">
                <table class="table table-primary" style="width: auto">
                    <thead>
                        <tr>
                            <th scope="col">
                                Kennziffer
                            </th>
                            <th scope="col">
                                Boxplot aus Ihrem Datensatz
                            </th>
                            <th scope="col">
                                Boxplot aus der Aufgabenstellung
                            </th>
                        </tr>
                    </thead>
                    <tr id="oer-aufgabe-23_zeile_antenne_links">
                        <th>
                            Linke Antenne
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_antenne_links_antwort">
                                [[input:ans3]]
                            </span>
                            [[validation:ans3]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_antenne_links_aufgabe">
                                [[input:ans2]]
                            </span>
                            [[validation:ans2]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_uquartil">
                        <th>
                            Unteres Quartil
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_uquartil_antwort">
                                [[input:ans5]]
                            </span>
                            [[validation:ans5]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_uquartil_aufgabe">
                                [[input:ans4]]
                            </span>
                            [[validation:ans4]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_median">
                        <th>
                            Median
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_median_antwort">
                                [[input:ans7]]
                            </span>
                            [[validation:ans7]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_median_aufgabe">
                                [[input:ans6]]
                            </span>
                            [[validation:ans6]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_oquartil">
                        <th>
                            Oberes Quartil
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_oquartil_antwort">
                                [[input:ans9]]
                            </span>
                            [[validation:ans9]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_oquartil_aufgabe">
                                [[input:ans8]]
                            </span>
                            [[validation:ans8]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_antenne_rechts">
                        <th>
                            Rechte Antenne
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_antenne_rechts_antwort">
                                [[input:ans11]]
                            </span>
                            [[validation:ans11]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_antenne_rechts_aufgabe">
                                [[input:ans10]]
                            </span>
                            [[validation:ans10]]
                        </td>
                    </tr>
                </table>
            </div>
            <p>
                Bitte klicken Sie nach dem Ausf&#252;llen auf "Pr&#252;fen".
            </p>
        </div>
        <div id="oer-aufgabe-23_prt_vergleichen">
            [[feedback:prt_vergleichen]]
        </div>
    </div>
    <div id="oer-aufgabe-23_neuer_versuch" style="display: none">
        <p>
            Bitte versuchen Sie nun erneut, einen Datensatz anzugeben, der zu dem
                                gegebenen Boxplot passt. Klicken Sie dann auf "Pr&#252;fen".
        </p>
        <p>
            Sie k&#246;nnen als Ausgangspunkt Ihren urspr&#252;nglichen Datensatz nutzen.
                                Schauen Sie auch in die Grafik, in der der Boxplot aus der
                                Aufgabenstellung und der Boxplot aus Ihrer ersten Antwort zu sehen sind.
        </p>
        <p>
            Antwort:
        </p>
        <div id="oer-aufgabe-23_stack_input1_neu">
            [[input:ans1_neu]] [[validation:ans1_neu]]
        </div>
        <p>
            <i>
                Hinweis: Bitte geben Sie die Liste mit eckigen Klammern an, z. B.
            </i>
            <code>
                [1,2,3]
            </code>
        </p>
        [[feedback:prt1_neu]]
    </div>
    <script>
        /* Event-Listener: Antwort aus Eingabefeld ans1 wird autoamtisch in Eingabefeld ans1_copy &#252;bertragen */
                document
                                .querySelector("#oer-aufgabe-23_stack_input1_neu > input")
                                .addEventListener("input", (event) => {
                                                document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1 > input"
                                                ).value = document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1_neu > input"
                                                ).value;
                                });

    
    
    
    document
                                .querySelector("#oer-aufgabe-23_stack_input1 > input")
                                .addEventListener("input", (event) => {
                                                document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1_copy > input"
                                                ).value = document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1 > input"
                                                ).value;
                                });

    
    
    
    // Funktion, um einen String in die Zwischenablage zu kopieren
                function copyToClipboard(text) {
                                let textArea;
                                try {
                                                // Try using the Asynchronous Clipboard API
                                                navigator.clipboard.writeText(text);
                                } catch (err) {
                                                // Fallback to the document.execCommand method
                                                textArea = document.createElement("textarea");
                                                textArea.value = text;
                                                document.body.appendChild(textArea);
                                                textArea.focus();
                                                textArea.select();
                                                document.execCommand("copy");
                                                document.body.removeChild(textArea);
                                }
                }
    </script>
    <script src="https://www.rub.de/ak-mathe-digital/stackselbstlern.js">
    </script>
</span>
<span class="multilang" lang="en">
    <style>
        .buttonweiter {
                                border: 1px solid black;
                                background-color: #a9f5bc;
                }

    
    
    
    .buttonweiter:hover {
                                background-color: #e0f8e6;
                }

    
    
    
    .buttonzurueck {
                                border: 1px solid black;
                                background-color: #dcb25e;
                }

    
    
    
    .buttonzurueck:hover {
                                background-color: #e7d2a7;
                }

    
    
    
    .popover_erklaerung {
                                color: #0f6fc5;
                }

    
    
    
    .popover_erklaerung:hover {
                                color: #0a477e;
                                text-decoration: underline;
                }

    
    
    
    .copytoclipboard {
                                cursor: copy;
                }
    </style>
    <div id="oer-aufgabe-23_aufgabe1">
        <p>
            In the picture you will see a boxplot.
            <br/>
            Please give a list of at least eight different real
Numbers so that the boxplot describes this record. Click
then on "Check".
        </p>
        <p>
            <i>
                When using the mouse over the individual parameters of the boxplot
their values are hidden. On touch screens must
the characteristic values are tapped.
            </i>
        </p>
        [[jsxgraph height='200px']]
                                const boxplotColor = '#0000bb'; //Farbe des unteren Boxplots: blau
                                const boxplot_height = 1.6; // H&#246;he des Boxplots
                                const antennen_height = 0.8; // H&#246;he der Antennen des Boxplots

        
        
        
        const board = JXG.JSXGraph.initBoard(divid, {
                                                axis:true,
                                                boundingbox: [{#mini-0.2*ampl#}, 2, {#maxi+0.2*ampl#}, -2],
                                                showCopyright:false,
                                                showNavigation:false,
                                                zoom:{enabled:false},
                                                pan:{enabled:false},
                                                defaultAxes:{
                                                                x:{lastArrow:false,
                                                                                ticks:{drawZero:true}
                                                                },
                                                                y:{lastArrow:false,
                                                                                visible:false,
                                                                                ticks:{drawLabels:false, drawZero:true}
                                                                }
                                                }
                                });

        
        
        
        const pol = board.create('point',[{#uquantil#},function(){return boxplot_height/2}],{visible:false,fixed:true});
                                const pul = board.create('point',[{#uquantil#},function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
                                const por = board.create('point',[{#oquantil#},function(){return boxplot_height/2}],{visible:false,fixed:true});
                                const pur = board.create('point',[{#oquantil#},function(){return 0-boxplot_height/2}],{visible:false,fixed:true});

        
        
        
        // === Linke Antenne ===
                                const grenze_links_text = board.create('text',[{#antenne_links-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+{#antenne_links#}}],{visible:false,fixed:true,color:boxplotColor});
                                const grenze_links = board.create('segment',[[{#antenne_links#},function(){return 0-antennen_height/2}],[{#antenne_links#},function(){return 0+antennen_height/2}]],{
                                                fixed:true,
                                                strokeWidth:3,
                                                strokeColor:boxplotColor
                                });
            
                    
                    
                    
        // Eventlistener f&#252;r Maus-Hovering
                                grenze_links.on('over', function(e){
                                                grenze_links_text.setAttribute({visible:true});
                                });
                                grenze_links.on('out', function(e){
                                                grenze_links_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let grenze_linksActive = false;
                                grenze_links.on('down', function(e){
                                                if(grenze_linksActive){
                                                                grenze_links_text.setAttribute({visible:false});
                                                } else{
                                                                grenze_links_text.setAttribute({visible:true});
                                                }
                                                grenze_linksActive = !grenze_linksActive;
                                });

        
        
        
        // === Rechte Antenne ===
                                const grenze_rechts_text = board.create('text',[{#antenne_rechts-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+{#antenne_rechts#}}],{visible:false,fixed:true,color:boxplotColor});
                                const grenze_rechts = board.create('segment',[[{#antenne_rechts#},function(){return 0-antennen_height/2}],[{#antenne_rechts#},function(){return 0+antennen_height/2}]],{
                                                fixed:true,
                                                strokeWidth:3,
                                                strokeColor:boxplotColor
                                });
                                // Eventlistener f&#252;r Maus-Hovering
                                grenze_rechts.on('over', function(e){
                                                grenze_rechts_text.setAttribute({visible:true});
                                });
                                grenze_rechts.on('out', function(e){
                                                grenze_rechts_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                const grenze_rechtsActive = false;
                                grenze_rechts.on('down', function(e){
                                                if(grenze_rechtsActive){
                                                                grenze_rechts_text.setAttribute({visible:false});
                                                } else{
                                                                grenze_rechts_text.setAttribute({visible:true});
                                                }
                                                grenze_rechtsActive = !grenze_rechtsActive;
                                });

        
        
        
        // === Grundlinien ===
                                const grundlinie_links = board.create('segment',[[{#antenne_links#},0],[{#uquantil#},0]],{
                                                fixed:true,
                                                strokeColor:boxplotColor,
                                                highlight:false
                                });
                                const grundlinie_rechts = board.create('segment',[[{#oquantil#},0],[{#antenne_rechts#},0]],{
                                                fixed:true,
                                                strokeColor:boxplotColor,
                                                highlight:false
                                });

        
        
        
        // === Median ===
                                const median_text = board.create('text',[{#med-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+{#med#}}],{visible:false,fixed:true,color:boxplotColor});
                                const median = board.create('segment',[[{#med#},function(){return 0-boxplot_height/2}],[{#med#},function(){return 0+boxplot_height/2}]],{
                                                fixed:true,
                                                strokeColor:boxplotColor
                                });
                                // Eventlistener f&#252;r Maus-Hovering
                                median.on('over', function(e){
                                                median_text.setAttribute({visible:true});
                                });
                                median.on('out', function(e){
                                                median_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let medianActive = false;
                                median.on('down', function(e){
                                                if(medianActive){
                                                                median_text.setAttribute({visible:false});
                                                } else{
                                                                median_text.setAttribute({visible:true});
                                                }
                                                medianActive = !medianActive;
                                });

        
        
        
        // === Box ===
                                const uquantil_text = board.create('text',[{#uquantil-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+{#uquantil#}}],{visible:false,fixed:true,color:boxplotColor});
                                const oquantil_text = board.create('text',[{#oquantil-1#},function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+{#oquantil#}}],{visible:false,fixed:true,color:boxplotColor});
                                const box = board.create('polygon',[pol,por,pur,pul],{
                                                                fillColor:boxplotColor,
                                                                highlight:false,
                                                                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:boxplotColor}
                                });
                                box.borders[2].setAttribute({highlight:false});
                                box.borders[0].setAttribute({highlight:false});
                                // Eventlistener f&#252;r Mouse-Hovering
                                box.borders[3].on('over', function(e){
                                                uquantil_text.setAttribute({visible:true});
                                });
                                box.borders[3].on('out', function(e){
                                                uquantil_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let uquantilActive = false;
                                box.borders[3].on('down', function(e){
                                                if(uquantilActive){
                                                                uquantil_text.setAttribute({visible:false});
                                                } else{
                                                                uquantil_text.setAttribute({visible:true});
                                                }
                                                uquantilActive = !uquantilActive;
                                });
                                // Eventlistener f&#252;r Mouse-Hovering
                                box.borders[1].on('over', function(e){
                                                oquantil_text.setAttribute({visible:true});
                                });
                                box.borders[1].on('out', function(e){
                                                oquantil_text.setAttribute({visible:false});
                                });
                                // Eventlistener f&#252;r Touch
                                let oquantilActive = false;
                                box.borders[1].on('down', function(e){
                                                if(oquantilActive){
                                                                oquantil_text.setAttribute({visible:false});
                                                } else{
                                                                oquantil_text.setAttribute({visible:true});
                                                }
                                                oquantilActive = !oquantilActive;
                                });
                [[/jsxgraph]]
        <p>
            Answer:
        </p>
        <div id="oer-aufgabe-23_stack_input1">
            [[input:ans1]] [[validation:ans1]]
        </div>
        <!-- Kopie der ersten Antwort -->
        <div id="oer-aufgabe-23_stack_input1_copy" style="display: none">
            [[input:ans1_copy]] [[validation:ans1_copy]]
        </div>
        <p>
            <i>
                Note: Please enter the list with square brackets, e.g.
            </i>
            <code>
                [1,2,3]
            </code>
        </p>
    </div>
    <div id="oer-aufgabe-23_aufgabe1_prt">
        [[feedback:prt1]]
    </div>
    <div id="oer-aufgabe-23_weiterfuehrende_aufgabe" style="display: none">
        <br/>
        <br/>
        <p>
            At the top you can see what characteristics of the
            <span class="oer-aufgabe-23_farbe_oben">
                Boxplots from your dataset
            </span>
            not with those of
            <span class="oer-aufgabe-23_farbe_unten">
                Boxplots from the task
            </span>
            match.
        </p>
        <p>
            Read the values of both boxplots that do not
match. Then fill out the following table:
        </p>
        <div id="oer-aufgabe-23_tabelle_vergleich">
            <div style="overflow-x: auto">
                <table class="table table-primary" style="width: auto">
                    <thead>
                        <tr>
                            <th scope="col">
                                Reference number
                            </th>
                            <th scope="col">
                                Boxplot from your dataset
                            </th>
                            <th scope="col">
                                Boxplot from the task
                            </th>
                        </tr>
                    </thead>
                    <tr id="oer-aufgabe-23_zeile_antenne_links">
                        <th>
                            Left antenna
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_antenne_links_antwort">
                                [[input:ans3]]
                            </span>
                            [[validation:ans3]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_antenne_links_aufgabe">
                                [[input:ans2]]
                            </span>
                            [[validation:ans2]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_uquartil">
                        <th>
                            Lower quartile
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_uquartil_antwort">
                                [[input:ans5]]
                            </span>
                            [[validation:ans5]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_uquartil_aufgabe">
                                [[input:ans4]]
                            </span>
                            [[validation:ans4]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_median">
                        <th>
                            median
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_median_antwort">
                                [[input:ans7]]
                            </span>
                            [[validation:ans7]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_median_aufgabe">
                                [[input:ans6]]
                            </span>
                            [[validation:ans6]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_oquartil">
                        <th>
                            Upper quartile
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_oquartil_antwort">
                                [[input:ans9]]
                            </span>
                            [[validation:ans9]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_oquartil_aufgabe">
                                [[input:ans8]]
                            </span>
                            [[validation:ans8]]
                        </td>
                    </tr>
                    <tr id="oer-aufgabe-23_zeile_antenne_rechts">
                        <th>
                            Antenna
                        </th>
                        <td>
                            <span id="oer-aufgabe-23_antenne_rechts_antwort">
                                [[input:ans11]]
                            </span>
                            [[validation:ans11]]
                        </td>
                        <td>
                            <span id="oer-aufgabe-23_antenne_rechts_aufgabe">
                                [[input:ans10]]
                            </span>
                            [[validation:ans10]]
                        </td>
                    </tr>
                </table>
            </div>
            <p>
                Please click "Check" after filling in.
            </p>
        </div>
        <div id="oer-aufgabe-23_prt_vergleichen">
            [[feedback:prt_vergleichen]]
        </div>
    </div>
    <div id="oer-aufgabe-23_neuer_versuch" style="display: none">
        <p>
            Please try again to specify a data set to:
given boxplot fits. Then click "Check".
        </p>
        <p>
            You can use your original record as a starting point.
also look into the graphic in which the boxplot from the
Tasks and the boxplot can be seen from your first answer.
        </p>
        <p>
            Answer:
        </p>
        <div id="oer-aufgabe-23_stack_input1_neu">
            [[input:ans1_neu]] [[validation:ans1_neu]]
        </div>
        <p>
            <i>
                Note: Please enter the list with square brackets, e.g.
            </i>
            <code>
                [1,2,3]
            </code>
        </p>
        [[feedback:prt1_neu]]
    </div>
    <script>
        /* Event-Listener: Antwort aus Eingabefeld ans1 wird autoamtisch in Eingabefeld ans1_copy &#252;bertragen */
                document
                                .querySelector("#oer-aufgabe-23_stack_input1_neu > input")
                                .addEventListener("input", (event) => {
                                                document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1 > input"
                                                ).value = document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1_neu > input"
                                                ).value;
                                });

    
    
    
    document
                                .querySelector("#oer-aufgabe-23_stack_input1 > input")
                                .addEventListener("input", (event) => {
                                                document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1_copy > input"
                                                ).value = document.querySelector(
                                                                "#oer-aufgabe-23_stack_input1 > input"
                                                ).value;
                                });

    
    
    
    // Funktion, um einen String in die Zwischenablage zu kopieren
                function copyToClipboard(text) {
                                let textArea;
                                try {
                                                // Try using the Asynchronous Clipboard API
                                                navigator.clipboard.writeText(text);
                                } catch (err) {
                                                // Fallback to the document.execCommand method
                                                textArea = document.createElement("textarea");
                                                textArea.value = text;
                                                document.body.appendChild(textArea);
                                                textArea.focus();
                                                textArea.select();
                                                document.execCommand("copy");
                                                document.body.removeChild(textArea);
                                }
                }
    </script>
    <script src="https://www.rub.de/ak-mathe-digital/stackselbstlern.js">
    </script>
</span>
]]></text>
        </questiontext>
        <generalfeedback format="moodle_auto_format">
            <text/>
        </generalfeedback>
        <defaultgrade>1.0000000</defaultgrade>
        <penalty>0.1000000</penalty>
        <hidden>0</hidden>
        <idnumber/>
        <stackversion>
            <text>2023010400</text>
        </stackversion>
        <questionvariables>
            <text><![CDATA[/*
  Boxplot

  wurde entwickelt von
  
    Jonas Lache <jonas.lache[at]ruhr-uni-bochum.de>

  an der Ruhr-Universit&#228;t Bochum.

  Dieses Werk ist lizenziert unter einer Creative Commons
  Namensnennung-Weitergabe unter gleichen Bedingungen 4.0 International
  Lizenz. Um eine Kopie der Lizenz zu erhalten, besuchen Sie
  http://creativecommons.org/licenses/by-sa/4.0/.

  SPDX-License-Identifier: CC-BY-SA-4.0

  Technische Informationen:

  Diese Aufgabe bindet das Skript &#8216;stackselbstlern.js&#8217; von Michael
  Kallweit f&#252;r die Aufgabennavigation ein.
*/

/*Funktion f&#252;r die Berechnung des Medians.*/
median1(L):=if oddp(length(L)) then L[(length(L)+1)/2] else (L[length(L)/2]+L[length(L)/2+1])/2;

/*Funktion f&#252;r die Berechnung von p-Quantilen. Bitte ggf. durch die Definition ersetzen, die Ihre Studierenden kennen. */
pquantil(L,p):=if integerp(p*length(L)) then 1/2*(L[length(L)*p]+L[length(L)*p+1]) else L[floor(length(L)*p+1)]; 

/*Funktion f&#252;r die Erzeugung einer Liste ohne doppelte Werte:*/
unique_list(min,max,anzahl):= block([L],
    L:[],
    for i:1 thru anzahl do(
        L: cons(rand_with_prohib(min,max,L),L)
    ),
    return(L)
);

/*Gibt true zur&#252;ck, wenn in der Liste "L" ein Ausrei&#223;er enthalten ist.*/
ausreisserp(L):= is(length(sublist(L,lambda([x],x<pquantil(L,1/4)-3/2*(pquantil(L,3/4)-pquantil(L,1/4)))))>0) or is(length(sublist(L,lambda([x],x>pquantil(L,3/4)+3/2*(pquantil(L,3/4)-pquantil(L,1/4)))))>0); 

/*Sortierte eindeutige Liste ohne Ausrei&#223;er*/
L1: block(
     [L,uquantil,oquantil,IQR,ausreisser_unten,ausreisser_oben],
     L: sort(unique_list(1,30,10)),
     while(ausreisserp(L)) do L: sort(unique_list(1,30,10)),
     return(L)
);

/*Wandelt die Punkte aus L1 in Punkte um (f&#252;r die Grafik)*/
Lpunkte: makelist([L1[k],0],k,1,length(L1));

/*Kennwerte:*/
med: median1(L1);
uquantil: pquantil(L1,1/4);
oquantil: pquantil(L1,3/4);
IQR: oquantil-uquantil;
mini: lmin(L1);
maxi: lmax(L1);

/* Antennen des Boxplots (da keine Ausrei&#223;er existieren): */
antenne_rechts: maxi;
antenne_links: mini;

/*Arithmetisches Mittel der Liste L1:*/
arit_ans: apply("+",L1)/length(L1);

/*Spannweite/Amplitude von L1:*/
ampl: maxi-mini;

/*Liste mit den Kennwerten:*/
list_indicators: [antenne_links, uquantil, med, oquantil, antenne_rechts];]]></text>
        </questionvariables>
        <specificfeedback format="html">
            <text/>
        </specificfeedback>
        <questionnote format="moodle_auto_format">
            <text>Kenngr&#246;&#223;en = {@[antenne_links,uquantil,med,oquantil,antenne_rechts]@}</text>
        </questionnote>
        <questiondescription format="moodle_auto_format">
            <text/>
        </questiondescription>
        <questionsimplify>1</questionsimplify>
        <assumepositive>0</assumepositive>
        <assumereal>0</assumereal>
        <prtcorrect format="html">
            <text><![CDATA[
<span class="multilang" lang="de">
    <span style="font-size: 1.5em; color:green;">
        <i class="fa fa-check">
        </i>
    </span>
    Richtige Antwort, gut gemacht!
</span>
<span class="multilang" lang="en">
    <span style="font-size: 1.5em; color:green;">
        <i class="fa fa-check">
        </i>
    </span>
    Right answer, well done!
</span>
]]></text>
        </prtcorrect>
        <prtpartiallycorrect format="html">
            <text><![CDATA[
<span class="multilang" lang="de">
    <span style="font-size: 1.5em; color:orange;">
        <i class="fa fa-adjust">
        </i>
    </span>
    Ihre Antwort ist teilweise korrekt.
</span>
<span class="multilang" lang="en">
    <span style="font-size: 1.5em; color:orange;">
        <i class="fa fa-adjust">
        </i>
    </span>
    Your answer is partly correct.
</span>
]]></text>
        </prtpartiallycorrect>
        <prtincorrect format="html">
            <text><![CDATA[
<span class="multilang" lang="de">
    <span style="font-size: 1.5em; color:red;">
        <i class="fa fa-times">
        </i>
    </span>
    Falsche Antwort.
</span>
<span class="multilang" lang="en">
    <span style="font-size: 1.5em; color:red;">
        <i class="fa fa-times">
        </i>
    </span>
    Wrong answer.
</span>
]]></text>
        </prtincorrect>
        <decimals>.</decimals>
        <scientificnotation>*10</scientificnotation>
        <multiplicationsign>dot</multiplicationsign>
        <sqrtsign>1</sqrtsign>
        <complexno>i</complexno>
        <inversetrig>cos-1</inversetrig>
        <logicsymbol>lang</logicsymbol>
        <matrixparens>(</matrixparens>
        <variantsselectionseed/>
        <input>
            <name>ans1</name>
            <type>algebraic</type>
            <tans>L1</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>1</checkanswertype>
            <mustverify>1</mustverify>
            <showvalidation>1</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans1_copy</name>
            <type>algebraic</type>
            <tans>L1</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>0</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans1_neu</name>
            <type>algebraic</type>
            <tans>L1</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>1</checkanswertype>
            <mustverify>1</mustverify>
            <showvalidation>1</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans10</name>
            <type>algebraic</type>
            <tans>maxi</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans11</name>
            <type>algebraic</type>
            <tans>maxi</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans2</name>
            <type>algebraic</type>
            <tans>mini</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans3</name>
            <type>algebraic</type>
            <tans>mini</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans4</name>
            <type>algebraic</type>
            <tans>uquantil</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans5</name>
            <type>algebraic</type>
            <tans>uquantil</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans6</name>
            <type>algebraic</type>
            <tans>med</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans7</name>
            <type>algebraic</type>
            <tans>med</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans8</name>
            <type>algebraic</type>
            <tans>oquantil</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <input>
            <name>ans9</name>
            <type>algebraic</type>
            <tans>oquantil</tans>
            <boxsize>15</boxsize>
            <strictsyntax>1</strictsyntax>
            <insertstars>0</insertstars>
            <syntaxhint/>
            <syntaxattribute>0</syntaxattribute>
            <forbidwords/>
            <allowwords/>
            <forbidfloat>0</forbidfloat>
            <requirelowestterms>0</requirelowestterms>
            <checkanswertype>0</checkanswertype>
            <mustverify>0</mustverify>
            <showvalidation>3</showvalidation>
            <options/>
        </input>
        <prt>
            <name>prt_vergleichen</name>
            <value>1.0000000</value>
            <autosimplify>1</autosimplify>
            <feedbackstyle>0</feedbackstyle>
            <feedbackvariables>
                <text><![CDATA[/*Sortierte Liste mit den Datenwerten aus der ersten Antwort:*/
L2: sort(float(map(fullratsimp,ans1)));
anspunkte: makelist([L2[k],0],k,1,length(L2));

/*Kennwerte des Datensatzes aus der ersten Antwort:*/
mini_ans: lmin(L2);
maxi_ans: lmax(L2);
med_ans: median1(L2);
arit_ans: apply("+",L2)/length(L2);
ampl_ans: maxi_ans-mini_ans;
uquantil_ans: pquantil(L2,1/4);
oquantil_ans: pquantil(L2,3/4);
IQR_ans: oquantil_ans-uquantil_ans;

/*Ausrei&#223;er aus der ersten Antwort:*/
ausreisser_unten_ans: sublist(L2,lambda([x],x<uquantil_ans-3/2*IQR_ans));
ausreisser_oben_ans: sublist(L2,lambda([x],x>oquantil_ans+3/2*IQR_ans));
ausreisser_punkte_ans: block([L],
  L:[],
  if not(ausreisser_oben_ans=[]) then L:cons([last(L2),0],L),
  if not(ausreisser_unten_ans=[]) then L:cons([first(L2),0],L),
    return(L)
);

/* Bestimmt, ob es einen oberen/unteren Ausrei&#223;er gibt und legt dadurch fest,
was die obere/untere Antenne des Boxplots aus der Antwort ist: */
antenne_rechts_ans: if ausreisser_oben_ans=[] then last(L2) else lmax(sublist(L2, lambda([x],x<=oquantil_ans+3/2*IQR_ans)));
antenne_links_ans: if ausreisser_unten_ans=[] then first(L2) else lmin(sublist(L2, lambda([x],x>=uquantil_ans-3/2*IQR_ans)));

/*Listen mit allen Antworten und den korrekten L&#246;sungen f&#252;r die Tabellenaufgabe:*/
Teil2_SAns: [ans2,ans3,ans4,ans5,ans6,ans7,ans8,ans9,ans10,ans11];
Teil2_TAns: [antenne_links, antenne_links_ans, uquantil, uquantil_ans, med, med_ans, oquantil, oquantil_ans, antenne_rechts, antenne_rechts_ans];

/*In den Feedbacktext eingef&#252;gte FA-Symbole (Antenne links):*/
untere_grenze_TAns_symbol: if is(abs(float(ans2)-float(antenne_links))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";
untere_grenze_SAns_symbol: if is(abs(float(ans3)-float(antenne_links_ans))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";

/*In den Feedbacktext eingef&#252;gte FA-Symbole (Unteres Quartil):*/
unteres_quartil_TAns_symbol: if is(abs(float(ans4)-float(uquantil))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";
unteres_quartil_SAns_symbol: if is(abs(float(ans5)-float(uquantil_ans))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";

/*In den Feedbacktext eingef&#252;gte FA-Symbole (Median):*/
median_TAns_symbol: if is(abs(float(ans6)-float(med))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";
median_SAns_symbol: if is(abs(float(ans7)-float(med_ans))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";

/*In den Feedbacktext eingef&#252;gte FA-Symbole (Oberes Quartil):*/
oberes_quartil_TAns_symbol: if is(abs(float(ans8)-float(oquantil))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";
oberes_quartil_SAns_symbol: if is(abs(float(ans9)-float(oquantil_ans))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";

/*In den Feedbacktext eingef&#252;gte FA-Symbole (Antenne rechts):*/
obere_grenze_TAns_symbol: if is(abs(float(ans10)-float(antenne_rechts))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";
obere_grenze_SAns_symbol: if is(abs(float(ans11)-float(antenne_rechts_ans))<=0.05) then "<span style='font-size: 1em; color:green;'><i class='fa fa-check'></i></span> " else "<span style='font-size: 1em; color:red;'><i class='fa fa-times'></i></span>";]]></text>
            </feedbackvariables>
            <node>
                <name>0</name>
                <description/>
                <answertest>NumAbsolute</answertest>
                <sans>Teil2_SAns</sans>
                <tans>Teil2_TAns</tans>
                <testoptions>0.05</testoptions>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>1.0000000</truescore>
                <truepenalty/>
                <truenextnode>-1</truenextnode>
                <trueanswernote>prt_vergleichen-11-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="correct">
        <span style="font-size: 1.5em; color:green;">
            <i class="fa fa-check">
            </i>
        </span>
        Richtige Antwort, gut gemacht!
    </p>
    <br/>
    <!-- PRT -->
    <div style="overflow-x:auto;">
        <table class="table table-primary" style="width:auto">
            <tr>
                <th>
                    Kennziffer
                </th>
                <th>
                    Boxplot aus Ihrem Datensatz
                </th>
                <th>
                    Boxplot aus der Aufgabenstellung
                </th>
            </tr>
            <tr id="oer-aufgabe-23_zeile_untere_grenze_prt">
                <th>
                    Linke Antenne
                </th>
                <td>
                    <input id="oer-aufgabe-23_untere_grenze_SAns_input" type="textfield"/>
                    {@untere_grenze_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_untere_grenze_TAns_input" type="textfield"/>
                    {@untere_grenze_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_unteres_quartil_prt">
                <th>
                    Unteres Quartil
                </th>
                <td>
                    <input id="oer-aufgabe-23_unteres_quartil_SAns_input" type="textfield"/>
                    {@unteres_quartil_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_unteres_quartil_TAns_input" type="textfield"/>
                    {@unteres_quartil_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_median_prt">
                <th>
                    Median
                </th>
                <td>
                    <input id="oer-aufgabe-23_median_SAns_input" type="textfield"/>
                    {@median_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_median_TAns_input" type="textfield"/>
                    {@median_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_oberes_quartil_prt">
                <th>
                    Oberes Quartil
                </th>
                <td>
                    <input id="oer-aufgabe-23_oberes_quartil_SAns_input" type="textfield"/>
                    {@oberes_quartil_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_oberes_quartil_TAns_input" type="textfield"/>
                    {@oberes_quartil_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_obere_grenze_prt">
                <th>
                    Rechte Antenne
                </th>
                <td>
                    <input id="oer-aufgabe-23_obere_grenze_SAns_input" type="textfield"/>
                    {@obere_grenze_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_obere_grenze_TAns_input" type="textfield"/>
                    {@obere_grenze_TAns_symbol@}
                </td>
            </tr>
        </table>
    </div>
    <hr/>
    <p>
        Klicken Sie auf den folgenden Button, um die urspr&#252;ngliche Aufgabenstellung erneut zu bearbeiten:
        <button class="buttonweiter" onclick="
            hide('oer-aufgabe-23_weiterfuehrende_aufgabe');
            show('oer-aufgabe-23_neuer_versuch');
    " type="button">
            Weiter
        </button>
    </p>
    <script>
        //Tabelle aus dem Fragetext ausblenden:
window.onload = function(){
            hide('oer-aufgabe-23_tabelle_vergleich');
};








// ==========================================================================
//Ausblenden aller Feedbacktexte, die sich auf Werte beziehen, die zuvor gar nicht eingegeben wurden:
// ==========================================================================




function knotenAusblenden(id) {
        if(document.getElementById(id)!==null){
                        document.getElementById(id).style.display="none";
        };
};








if({#antenne_links_ans#}=={#antenne_links#}){
            knotenAusblenden('oer-aufgabe-23_prt2_1w');
            knotenAusblenden('oer-aufgabe-23_prt2_1f');
            knotenAusblenden('oer-aufgabe-23_prt2_2w');
            knotenAusblenden('oer-aufgabe-23_prt2_2f');
};




if({#uquantil_ans#}=={#uquantil#}){
            knotenAusblenden('oer-aufgabe-23_prt2_3w');
            knotenAusblenden('oer-aufgabe-23_prt2_3f');
            knotenAusblenden('oer-aufgabe-23_prt2_4w');
            knotenAusblenden('oer-aufgabe-23_prt2_4f');
};




if({#med_ans#}=={#med#}){
            knotenAusblenden('oer-aufgabe-23_prt2_5w');
            knotenAusblenden('oer-aufgabe-23_prt2_5f');
            knotenAusblenden('oer-aufgabe-23_prt2_6w');
            knotenAusblenden('oer-aufgabe-23_prt2_6f');
};




if({#oquantil_ans#}=={#oquantil#}){
            knotenAusblenden('oer-aufgabe-23_prt2_7w');
            knotenAusblenden('oer-aufgabe-23_prt2_7f');
            knotenAusblenden('oer-aufgabe-23_prt2_8w');
            knotenAusblenden('oer-aufgabe-23_prt2_8f');
};




if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            knotenAusblenden('oer-aufgabe-23_prt2_9w');
            knotenAusblenden('oer-aufgabe-23_prt2_9f');
            knotenAusblenden('oer-aufgabe-23_prt2_10w');
            knotenAusblenden('oer-aufgabe-23_prt2_10f');
};








// ====================================================
// === Die Tabellenzeilen ausblenden, wo die Werte &#252;bereinstimmen ===
// ====================================================




//Linke Antenne:
if({#antenne_links_ans#}=={#antenne_links#}){
            document.getElementById('oer-aufgabe-23_zeile_untere_grenze_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_untere_grenze_TAns_input').value="{#ans2#}";
            document.getElementById('oer-aufgabe-23_untere_grenze_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_untere_grenze_SAns_input').value="{#ans3#}";
            document.getElementById('oer-aufgabe-23_untere_grenze_SAns_input').disabled=true;




//Unteres Quartil:
if({#uquantil_ans#}=={#uquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_unteres_quartil_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_unteres_quartil_TAns_input').value="{#ans4#}";
            document.getElementById('oer-aufgabe-23_unteres_quartil_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_unteres_quartil_SAns_input').value="{#ans5#}";
            document.getElementById('oer-aufgabe-23_unteres_quartil_SAns_input').disabled=true;




//Median:
if({#med_ans#}=={#med#}){
            document.getElementById('oer-aufgabe-23_zeile_median_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_median_TAns_input').value="{#ans6#}";
            document.getElementById('oer-aufgabe-23_median_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_median_SAns_input').value="{#ans7#}";
            document.getElementById('oer-aufgabe-23_median_SAns_input').disabled=true;




//Oberes Quartil:
if({#oquantil_ans#}=={#oquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_oberes_quartil_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_oberes_quartil_TAns_input').value="{#ans8#}";
            document.getElementById('oer-aufgabe-23_oberes_quartil_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_oberes_quartil_SAns_input').value="{#ans9#}";
            document.getElementById('oer-aufgabe-23_oberes_quartil_SAns_input').disabled=true;




//Rechte Antenne:
if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            document.getElementById('oer-aufgabe-23_zeile_obere_grenze_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_obere_grenze_TAns_input').value="{#ans10#}";
            document.getElementById('oer-aufgabe-23_obere_grenze_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_obere_grenze_SAns_input').value="{#ans11#}";
            document.getElementById('oer-aufgabe-23_obere_grenze_SAns_input').disabled=true;
    </script>
</span>
<span class="multilang" lang="en">
    <p class="correct">
        <span style="font-size: 1.5em; color:green;">
            <i class="fa fa-check">
            </i>
        </span>
        Right answer, well done!
    </p>
    <br/>
    <!-- PRT -->
    <div style="overflow-x:auto;">
        <table class="table table-primary" style="width:auto">
            <tr>
                <th>
                    Reference number
                </th>
                <th>
                    Boxplot from your dataset
                </th>
                <th>
                    Boxplot from the task
                </th>
            </tr>
            <tr id="oer-aufgabe-23_zeile_untere_grenze_prt">
                <th>
                    Left antenna
                </th>
                <td>
                    <input id="oer-aufgabe-23_untere_grenze_SAns_input" type="textfield"/>
                    {@untere_grenze_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_untere_grenze_TAns_input" type="textfield"/>
                    {@untere_grenze_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_unteres_quartil_prt">
                <th>
                    Lower quartile
                </th>
                <td>
                    <input id="oer-aufgabe-23_unteres_quartil_SAns_input" type="textfield"/>
                    {@unteres_quartil_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_unteres_quartil_TAns_input" type="textfield"/>
                    {@unteres_quartil_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_median_prt">
                <th>
                    median
                </th>
                <td>
                    <input id="oer-aufgabe-23_median_SAns_input" type="textfield"/>
                    {@median_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_median_TAns_input" type="textfield"/>
                    {@median_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_oberes_quartil_prt">
                <th>
                    Upper quartile
                </th>
                <td>
                    <input id="oer-aufgabe-23_oberes_quartil_SAns_input" type="textfield"/>
                    {@oberes_quartil_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_oberes_quartil_TAns_input" type="textfield"/>
                    {@oberes_quartil_TAns_symbol@}
                </td>
            </tr>
            <tr id="oer-aufgabe-23_zeile_obere_grenze_prt">
                <th>
                    Antenna
                </th>
                <td>
                    <input id="oer-aufgabe-23_obere_grenze_SAns_input" type="textfield"/>
                    {@obere_grenze_SAns_symbol@}
                </td>
                <td>
                    <input id="oer-aufgabe-23_obere_grenze_TAns_input" type="textfield"/>
                    {@obere_grenze_TAns_symbol@}
                </td>
            </tr>
        </table>
    </div>
    <hr/>
    <p>
        Click the following button to edit the original task:
        <button class="buttonweiter" onclick="
            hide('oer-aufgabe-23_weiterfuehrende_aufgabe');
            show('oer-aufgabe-23_neuer_versuch');
    " type="button">
            Next
        </button>
    </p>
    <script>
        //Tabelle aus dem Fragetext ausblenden:
window.onload = function(){
            hide('oer-aufgabe-23_tabelle_vergleich');
};








// ==========================================================================
//Ausblenden aller Feedbacktexte, die sich auf Werte beziehen, die zuvor gar nicht eingegeben wurden:
// ==========================================================================




function knotenAusblenden(id) {
        if(document.getElementById(id)!==null){
                        document.getElementById(id).style.display="none";
        };
};








if({#antenne_links_ans#}=={#antenne_links#}){
            knotenAusblenden('oer-aufgabe-23_prt2_1w');
            knotenAusblenden('oer-aufgabe-23_prt2_1f');
            knotenAusblenden('oer-aufgabe-23_prt2_2w');
            knotenAusblenden('oer-aufgabe-23_prt2_2f');
};




if({#uquantil_ans#}=={#uquantil#}){
            knotenAusblenden('oer-aufgabe-23_prt2_3w');
            knotenAusblenden('oer-aufgabe-23_prt2_3f');
            knotenAusblenden('oer-aufgabe-23_prt2_4w');
            knotenAusblenden('oer-aufgabe-23_prt2_4f');
};




if({#med_ans#}=={#med#}){
            knotenAusblenden('oer-aufgabe-23_prt2_5w');
            knotenAusblenden('oer-aufgabe-23_prt2_5f');
            knotenAusblenden('oer-aufgabe-23_prt2_6w');
            knotenAusblenden('oer-aufgabe-23_prt2_6f');
};




if({#oquantil_ans#}=={#oquantil#}){
            knotenAusblenden('oer-aufgabe-23_prt2_7w');
            knotenAusblenden('oer-aufgabe-23_prt2_7f');
            knotenAusblenden('oer-aufgabe-23_prt2_8w');
            knotenAusblenden('oer-aufgabe-23_prt2_8f');
};




if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            knotenAusblenden('oer-aufgabe-23_prt2_9w');
            knotenAusblenden('oer-aufgabe-23_prt2_9f');
            knotenAusblenden('oer-aufgabe-23_prt2_10w');
            knotenAusblenden('oer-aufgabe-23_prt2_10f');
};








// ====================================================
// === Die Tabellenzeilen ausblenden, wo die Werte &#252;bereinstimmen ===
// ====================================================




//Linke Antenne:
if({#antenne_links_ans#}=={#antenne_links#}){
            document.getElementById('oer-aufgabe-23_zeile_untere_grenze_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_untere_grenze_TAns_input').value="{#ans2#}";
            document.getElementById('oer-aufgabe-23_untere_grenze_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_untere_grenze_SAns_input').value="{#ans3#}";
            document.getElementById('oer-aufgabe-23_untere_grenze_SAns_input').disabled=true;




//Unteres Quartil:
if({#uquantil_ans#}=={#uquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_unteres_quartil_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_unteres_quartil_TAns_input').value="{#ans4#}";
            document.getElementById('oer-aufgabe-23_unteres_quartil_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_unteres_quartil_SAns_input').value="{#ans5#}";
            document.getElementById('oer-aufgabe-23_unteres_quartil_SAns_input').disabled=true;




//Median:
if({#med_ans#}=={#med#}){
            document.getElementById('oer-aufgabe-23_zeile_median_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_median_TAns_input').value="{#ans6#}";
            document.getElementById('oer-aufgabe-23_median_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_median_SAns_input').value="{#ans7#}";
            document.getElementById('oer-aufgabe-23_median_SAns_input').disabled=true;




//Oberes Quartil:
if({#oquantil_ans#}=={#oquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_oberes_quartil_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_oberes_quartil_TAns_input').value="{#ans8#}";
            document.getElementById('oer-aufgabe-23_oberes_quartil_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_oberes_quartil_SAns_input').value="{#ans9#}";
            document.getElementById('oer-aufgabe-23_oberes_quartil_SAns_input').disabled=true;




//Rechte Antenne:
if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            document.getElementById('oer-aufgabe-23_zeile_obere_grenze_prt').style.display="none";
};
            document.getElementById('oer-aufgabe-23_obere_grenze_TAns_input').value="{#ans10#}";
            document.getElementById('oer-aufgabe-23_obere_grenze_TAns_input').disabled=true;
            document.getElementById('oer-aufgabe-23_obere_grenze_SAns_input').value="{#ans11#}";
            document.getElementById('oer-aufgabe-23_obere_grenze_SAns_input').disabled=true;
    </script>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt_vergleichen-11-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="correct">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <p>
        Bitte versuchen Sie es erneut und klicken Sie dann auf "Pr&#252;fen".
    </p>
    <script>
        if( {#ans2#}=={#antenne_links#} ){
				document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans3#}=={#antenne_links_ans#} ){
				document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans4#}=={#uquantil#} ){
				document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans5#}=={#uquantil_ans#} ){
				document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans6#}=={#med#} ){
				document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans7#}=={#med_ans#} ){
				document.getElementById('oer-aufgabe-23_median_antwort').innerHTML=document.getElementById('oer-aufgabe-23_median_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_median_antwort').innerHTML=document.getElementById('oer-aufgabe-23_median_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans8#}=={#oquantil#} ){
				document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans9#}=={#oquantil_ans#} ){
				document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans10#}=={#antenne_rechts#} ){ //wenn die Werte &#252;bereinstimmen
				document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>"; //F&#252;ge Checkmark ein
} else{ //wenn die Werte nicht &#252;bereinstimmen
				document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; //F&#252;ge Cross ein




if( {#ans11#}=={#antenne_rechts_ans#} ){
				document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};
    </script>
</span>
<span class="multilang" lang="en">
    <p class="correct">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <p>
        Please try again and then click "Check".
    </p>
    <script>
        if( {#ans2#}=={#antenne_links#} ){
				document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans3#}=={#antenne_links_ans#} ){
				document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_links_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans4#}=={#uquantil#} ){
				document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans5#}=={#uquantil_ans#} ){
				document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_uquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans6#}=={#med#} ){
				document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_median_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans7#}=={#med_ans#} ){
				document.getElementById('oer-aufgabe-23_median_antwort').innerHTML=document.getElementById('oer-aufgabe-23_median_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_median_antwort').innerHTML=document.getElementById('oer-aufgabe-23_median_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans8#}=={#oquantil#} ){
				document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; 




if( {#ans9#}=={#oquantil_ans#} ){
				document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML=document.getElementById('oer-aufgabe-23_oquartil_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};




if( {#ans10#}=={#antenne_rechts#} ){ //wenn die Werte &#252;bereinstimmen
				document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>"; //F&#252;ge Checkmark ein
} else{ //wenn die Werte nicht &#252;bereinstimmen
				document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
}; //F&#252;ge Cross ein




if( {#ans11#}=={#antenne_rechts_ans#} ){
				document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML+"<span style='font-size: 1.5em; color:green;''><i class='fa fa-check'></i></span>";
} else{
				document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML=document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').innerHTML+"<span style='font-size: 1.5em; color:red;'><i class='fa fa-times'></i></span>";
};
    </script>
</span>
]]></text>
                </falsefeedback>
            </node>
        </prt>
        <prt>
            <name>prt1</name>
            <value>1.0000000</value>
            <autosimplify>1</autosimplify>
            <feedbackstyle>1</feedbackstyle>
            <feedbackvariables>
                <text><![CDATA[/*
=== Bedeutung der Knoten: ===
1. Ist die Antwort eine Liste?
2. Sind die angegebenen Werte alle unterschiedlich?
3. Sind nur Zahlen dabei, mit denen JSXGraph was anfangen kann? (kein pi, e, sqrt(),...)
4. Wurde eine Liste mit den Kenngr&#246;&#223;en eingegeben?
5. Ist die L&#228;nge der Liste in Ordnung? (Und Wiederholung des Datensatzes aus ans1)
6. Ist die gesamte Aufgabe richtig? (F&#252;r grafisches Feedback)
7. Stimmt die linke Antenne?
8. Stimmt das untere Quartil?
9. Stimmt der Median?
    10. Falls nein: Stimmt vielleicht das arithmetische Mittel von ans1 mit dem Median des gegebenen Box-Plots &#252;berein?
11. Stimmt das obere Quartil?
12. Stimmt die rechte Antenne?
13. Ist die Anzahl der oberen Ausrei&#223;er gleich null?
    14: Falls 13=false: Entspricht der obere Ausrei&#223;er denn der rechten Antenne des Boxplots aus der Aufgabenstellung?
15. Ist die Anzahl der unteren Ausrei&#223;er gleich null?
    16: Falls 15=false: Entspricht der untere Ausrei&#223;er denn der linken Antenne des Boxplots aus der Aufgabenstellung?
17. F&#252;r "Weiter"-Button
*/

/*Sortierte Liste mit den Datenwerten aus der Antwort:*/
L2: sort(float(map(fullratsimp,ans1))); 

/*Datenwerte als Punkte:*/
anspunkte: makelist([L2[k],3],k,1,length(L2)); 

/*Kennwerte aus der Antwort:*/
mini_ans: lmin(L2); /*Minimum des Boxplots aus der Antwort*/
maxi_ans: lmax(L2); /*Maximum des Boxplots aus der Antwort*/
med_ans: median1(L2); /*Median des Boxplots aus der Antwort*/
arit_ans: apply("+",L2)/length(L2); /*arithmetisches Mittel des Boxplots aus der Antwort*/
ampl_ans: maxi_ans-mini_ans; /*Spannweite des Boxplots aus der Antwort*/
uquantil_ans: pquantil(L2,1/4); /*Unteres Quartil des Boxplots aus der Antwort*/
oquantil_ans: pquantil(L2,3/4); /*Oberes Quartil des Boxplots aus der Antwort*/
IQR_ans: oquantil_ans-uquantil_ans; /*IQR des Boxplots aus der Antwort*/

/*Untere und obere Ausrei&#223;er des Boxplots aus der Antwort:*/
ausreisser_unten_ans: sublist(L2,lambda([x],x<uquantil_ans-3/2*IQR_ans)); 
ausreisser_oben_ans: sublist(L2,lambda([x],x>oquantil_ans+3/2*IQR_ans));

/*Ausrei&#223;er des Boxplots aus der Antwort oben und unten (Punkte)*/
ausreisser_punkte_ans: block([L], 
  L:[],
  if not(ausreisser_oben_ans=[]) then L:cons([last(L2),3],L), /*f&#252;gt L oberen Ausrei&#223;er hinzu, wenn es einen gibt*/
  if not(ausreisser_unten_ans=[]) then L:cons([first(L2),3],L), /*f&#252;gt L unteren Ausrei&#223;er hinzu, wenn es einen gibt*/
    return(L)
);

/*Nur die x-Werte der Punkte:*/
ausreisser_punkte_x_ans: makelist(ausreisser_punkte_ans[k][1],k,1,length(ausreisser_punkte_ans));

/* Bestimmt, ob es einen oberen/unteren Ausrei&#223;er gibt und legt dadurch fest,
was die obere/untere Antenne des Boxplots aus der Antwort ist: */
antenne_rechts_ans: if ausreisser_oben_ans=[] then last(L2) else lmax(sublist(L2, lambda([x],x<=oquantil_ans+3/2*IQR_ans)));
antenne_links_ans: if ausreisser_unten_ans=[] then first(L2) else lmin(sublist(L2, lambda([x],x>=uquantil_ans-3/2*IQR_ans)));

/*Globales Minimum, Maximum und globale Spannweite f&#252;r die Bondingbox des Boards*/
mini_global: min(mini,mini_ans);
maxi_global: max(maxi,maxi_ans);
ampl_global: max(ampl,ampl_ans);

/*Strings f&#252;r den Feedbacktext zu Ausrei&#223;ern*/
ausreisser_oben_wert_ans: if length(ausreisser_oben_ans)>0 then last(ausreisser_oben_ans) else "keiner";
ausreisser_unten_wert_ans: if length(ausreisser_unten_ans)>0 then first(ausreisser_unten_ans) else "keiner";

/*Liste mit Werten, die Studierende genannt haben, die keine reellen Zahlen sind.*/
enthaltene_strings: sublist(L2,lambda([x], stringp(x)));
L2_ohne_strings: sublist(L2,lambda([y],not(stringp(y))));
sonstige_verbotene_zahlen: sublist(L2_ohne_strings,lambda([x],
        not(constantp(x)) or imagpart(x)#0 or setp(x) or listp(x)
    )
);
verboteneZahlen: append(enthaltene_strings,sonstige_verbotene_zahlen);

/*&#220;berpr&#252;fen, ob Ausrei&#223;er existieren (f&#252;r Grafik):*/
antenneXausreisser_oben: if ausreisser_oben_wert_ans="keiner" then is(ausreisser_oben_wert=antenne_rechts_ans) else is(ausreisser_oben_wert_ans=antenne_rechts);
antenneXausreisser_unten: if ausreisser_unten_wert_ans="keiner" then is(ausreisser_unten_wert=antenne_links_ans) else is(ausreisser_unten_wert_ans=antenne_links);]]></text>
            </feedbackvariables>
            <node>
                <name>0</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>listp(ans1)</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>=</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>1</truenextnode>
                <trueanswernote>prt1-1-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>=</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1-1-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Ihre eingegebene Antwort ist keine Liste in der Form
        <code>
            [a,b,c,...]
        </code>
    </p>
    <p>
        Bitte geben Sie eine Liste an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        Your entered reply is not a list in the form
        <code>
            [a,b,c,...]
        </code>
    </p>
    <p>
        Please enter a list and then click "Check" again.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>1</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ans1)</sans>
                <tans>length(unique(ans1))</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>2</truenextnode>
                <trueanswernote>prt1-2-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1-2-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Ihre Liste sollte nur unterschiedliche Werte enthalten
    </p>
    <p>
        Bitte geben Sie eine Liste unterschiedlicher Werte an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        Your list should contain only different values
    </p>
    <p>
        Please enter a list of different values and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>10</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>oquantil_ans</sans>
                <tans>oquantil</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.2000000</truescore>
                <truepenalty/>
                <truenextnode>11</truenextnode>
                <trueanswernote>prt1-11-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Oberes Quartil
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Upper quartile
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>11</falsenextnode>
                <falseanswernote>prt1-11-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Oberes Quartil
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Upper quartile
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>11</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenne_rechts_ans</sans>
                <tans>antenne_rechts</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.2000000</truescore>
                <truepenalty/>
                <truenextnode>12</truenextnode>
                <trueanswernote>prt1-12-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Rechte Antenne
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Antenna
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>12</falsenextnode>
                <falseanswernote>prt1-12-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Rechte Antenne
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Antenna
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>12</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ausreisser_oben_ans)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>14</truenextnode>
                <trueanswernote>prt1-13-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.1000000</falsescore>
                <falsepenalty/>
                <falsenextnode>13</falsenextnode>
                <falseanswernote>prt1-13-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <br/>
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        Im Boxplot aus der Aufgabenstellung ist kein maximaler Wert als Ausrei&#223;er eingezeichnet. Der Boxplot, der sich aus Ihren Daten ergibt, hat aber einen solchen Wert.
    </p>
</span>
<span class="multilang" lang="en">
    <br/>
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        In the box plot from the task, no maximum value is entered as an outlier. The boxplot, which results from your data, has such a value.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>13</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenneXausreisser_oben</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>14</truenextnode>
                <trueanswernote>prt1-14-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Der obere Ausrei&#223;er aus Ihrem Datensatz stammt aber mit der rechten Antenne des Boxplots aus der Aufgabenstellung &#252;berein (in der Grafik durch
        <span style="color:orange">
            gelbe
        </span>
        Hilfslinien dargestellt).
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        The upper outlier from your dataset comes in agreement with the right antenna of the boxplot from the task position (in the graphic by
        <span style="color:orange">
            Yellow
        </span>
        Aid lines shown).
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>14</falsenextnode>
                <falseanswernote>prt1-14-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>14</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ausreisser_unten_ans)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>16</truenextnode>
                <trueanswernote>prt1-15-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.1000000</falsescore>
                <falsepenalty/>
                <falsenextnode>15</falsenextnode>
                <falseanswernote>prt1-15-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        Im Boxplot aus der Aufgabenstellung ist kein minimaler Wert als Ausrei&#223;er eingezeichnet. Der Boxplot, der sich aus Ihren Daten ergibt, hat aber einen solchen Wert.
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        In the boxplot from the task, no minimum value is entered as an outlier. The boxplot, which results from your data, has such a value.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>15</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenneXausreisser_unten</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>16</truenextnode>
                <trueanswernote>prt1-16-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Der untere Ausrei&#223;er aus Ihrem Datensatz stammt aber mit der linken Antenne des Boxplots aus der Aufgabenstellung &#252;berein (in der Grafik durch
        <span style="color:orange">
            gelbe
        </span>
        Hilfslinien dargestellt).
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        The lower outlier from your dataset comes however with the left antenna of the boxplot from the task position (in the graphic by
        <span style="color:orange">
            Yellow
        </span>
        Aid lines shown).
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>16</falsenextnode>
                <falseanswernote>prt1-16-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>16</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>[antenne_links_ans, antenne_rechts_ans, med_ans, uquantil_ans, oquantil_ans]</sans>
                <tans>[antenne_links, antenne_rechts, med, uquantil, oquantil]</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>-1</truenextnode>
                <trueanswernote>prt1-17-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    [[ if test='is(length(ausreisser_unten_ans)#0 or length(ausreisser_oben_ans)#0)' ]]
    <div id="oer-aufgabe-23_weiter">
        <hr/>
        <p>
            Bitte klicken Sie auf den folgenden Button um fortzufahren:
            <button class="buttonweiter" onclick="show('oer-aufgabe-23_neuer_versuch');hide('oer-aufgabe-23_weiter');" type="button">
                Weiter
            </button>
        </p>
    </div>
    [[ else ]]
    <hr/>
    <p>
        Herzlichen Gl&#252;ckwunsch, Sie sind am Ende der Aufgabe angelangt! Jetzt sollten Sie zu einem gegebenen Boxplot einen passenden Datensatz finden k&#246;nnen.
    </p>
    [[/ if ]]
</span>
<span class="multilang" lang="en">
    [[ if test='is(length(ausreisser_unten_ans)#0 or length(ausreisser_oben_ans)#0)' ]]
    <div id="oer-aufgabe-23_weiter">
        <hr/>
        <p>
            Please click on the following button to proceed:
            <button class="buttonweiter" onclick="show('oer-aufgabe-23_neuer_versuch');hide('oer-aufgabe-23_weiter');" type="button">
                Next
            </button>
        </p>
    </div>
    [[ else ]]
    <hr/>
    <p>
        Congratulations, you have reached the end of the task! Now you should be able to find a matching record for a given boxplot.
    </p>
    [[/ if ]]
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1-17-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div id="oer-aufgabe-23_weiter">
        <hr/>
        <p>
            Bitte klicken Sie auf den folgenden Button um fortzufahren:
            <button class="buttonweiter" onclick="show('oer-aufgabe-23_weiterfuehrende_aufgabe');hide('oer-aufgabe-23_weiter');" type="button">
                Weiter
            </button>
        </p>
    </div>
</span>
<span class="multilang" lang="en">
    <div id="oer-aufgabe-23_weiter">
        <hr/>
        <p>
            Please click on the following button to proceed:
            <button class="buttonweiter" onclick="show('oer-aufgabe-23_weiterfuehrende_aufgabe');hide('oer-aufgabe-23_weiter');" type="button">
                Next
            </button>
        </p>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>2</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(verboteneZahlen)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>3</truenextnode>
                <trueanswernote>prt1-3-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1-3-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Ihr Datensatz enth&#228;lt folgende Werte, die nicht ausgewertet werden konnten:
    </p>
    \[ {@sequenceify(verboteneZahlen)@} \]
    <p>
        Bitte geben Sie eine Liste reeller Zahlen an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        Your dataset contains the following values that could not be evaluated:
    </p>
    \[ {@sequenceify(verboteneZahlen)@} \]
    <p>
        Please enter a list of real numbers and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>3</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>L2</sans>
                <tans>list_indicators</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>-1</truenextnode>
                <trueanswernote>prt1-4-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Es sieht so aus, als h&#228;tten Sie die Kenngr&#246;&#223;en bestimmt.
    </p>
    <p>
        Bitte geben einen Datensatz an, der zu dem gegebenen Boxplot passt. Klicken Sie dann wieder auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        It looks like you've determined the parameters.
    </p>
    <p>
        Please specify a record that matches the given boxplot. Then click "Check" again.
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>4</falsenextnode>
                <falseanswernote>prt1-4-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>4</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans><![CDATA[is(length(ans1)>=8)]]></sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>5</truenextnode>
                <trueanswernote>prt1-5-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        <b>
            Sie haben folgenden Datensatz angegeben:
        </b>
        {@sequenceify(ans1)@}
        <button class="btn btn-link" onclick="copyToClipboard('['+{#ans1#}+']')" style="padding:0" type="button">
            <i class="icon fa fa-solid fa-clipboard fa-fw copytoclipboard" data-placement="top" data-toggle="tooltip" title="In die Zwischenablage kopieren">
            </i>
        </button>
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        <b>
            You have given the following data set:
        </b>
        {@sequenceify(ans1)@}
        <button class="btn btn-link" onclick="copyToClipboard('['+{#ans1#}+']')" style="padding:0" type="button">
            <i class="icon fa fa-solid fa-clipboard fa-fw copytoclipboard" data-placement="top" data-toggle="tooltip" title="In die Zwischenablage kopieren">
            </i>
        </button>
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1-5-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Ihre Liste enth&#228;lt weniger als acht Werte.
    </p>
    <p>
        Bitte geben Sie eine Liste mit mindestens acht unterschiedlichen Werten an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        Your list contains less than eight values.
    </p>
    <p>
        Please enter a list with at least eight different values and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>5</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>[mini_ans, maxi_ans, med_ans, uquantil_ans, oquantil_ans]</sans>
                <tans>[mini, maxi, med, uquantil, oquantil]</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>6</truenextnode>
                <trueanswernote>prt1-6-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <hr/>
    <p>
        In der folgenden Abbildung sehen Sie unten den
        <span class="oer-aufgabe-23_farbe_unten">
            in der Aufgabe gegebenen Boxplot
        </span>
        . Dar&#252;ber sehen Sie die von Ihnen angegebenen Daten inkl. des
        <span class="oer-aufgabe-23_farbe_oben">
            sich daraus ergebenen Boxplots
        </span>
        &#8211; wie Sie sehen stimmen die beiden &#252;berein.
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(
                document.querySelector(".stackprtfeedback-prt1",null)
).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der Antwort




const datapoints_y = 2; // y-Position der Datenpunkte




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints_y+0.4);




const mini_global = {#float(mini_global)#};
const ampl_global = {#float(ampl_global)#};
const maxi_global = {#float(maxi_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global-0.25*ampl_global, highest_position+0.5, maxi_global+0.2*ampl_global, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                    x:{lastArrow:false,
                                                    ticks:{drawZero:true}
                                    },
                                    y:{lastArrow:false,
                                                    visible:false,
                                                    ticks:{drawLabels:false, drawZero:true}
                                    }
                    }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ====================================================
// ================ Boxplot aus der Antwort ===========
// ====================================================
// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse2_y],[uquantil_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse2_y],[antenne_rechts_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
var median_ans = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height_ans/2}],[med_ans,function(){return achse2_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
}) };




// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
var box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                    }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            Wenn Sie mit der Maus &#252;ber die einzelnen Kennwerte der beiden Boxplots fahren, werden deren Werte eingeblendet. Auf Touch-Screens m&#252;ssen die Kennwerte angetippt werden.
        </i>
    </p>
    <p>
        Die
        <span style="color:green">
            gr&#252;nen
        </span>
        Hilfslinien, die Sie mithilfe der Checkbox aktivieren k&#246;nnen, zeigen Ihnen, dass die Kennwerte jeweils &#252;bereinstimmen.
    </p>
    <hr/>
    <p>
        Die folgende Checkliste ist eine &#220;bersicht &#252;ber die Kennziffern der Boxplots. Die gr&#252;nen Haken kennzeichnen, dass die jeweiligen Werte beider Boxplots &#252;bereinstimmen. Wenn Sie auf die Kenngr&#246;&#223;en klicken, wird Ihnen eine Erkl&#228;rung angezeigt.
    </p>
</span>
<span class="multilang" lang="en">
    <hr/>
    <p>
        In the following picture, see below the
        <span class="oer-aufgabe-23_farbe_unten">
            in the task
        </span>
        . You can see the data you provide including the
        <span class="oer-aufgabe-23_farbe_oben">
            resulting boxplots
        </span>
        &#8211; as you see, the two agree.
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(
                document.querySelector(".stackprtfeedback-prt1",null)
).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der Antwort




const datapoints_y = 2; // y-Position der Datenpunkte




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints_y+0.4);




const mini_global = {#float(mini_global)#};
const ampl_global = {#float(ampl_global)#};
const maxi_global = {#float(maxi_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global-0.25*ampl_global, highest_position+0.5, maxi_global+0.2*ampl_global, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                    x:{lastArrow:false,
                                                    ticks:{drawZero:true}
                                    },
                                    y:{lastArrow:false,
                                                    visible:false,
                                                    ticks:{drawLabels:false, drawZero:true}
                                    }
                    }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ====================================================
// ================ Boxplot aus der Antwort ===========
// ====================================================
// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse2_y],[uquantil_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse2_y],[antenne_rechts_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
var median_ans = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height_ans/2}],[med_ans,function(){return achse2_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
}) };




// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
var box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                    }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            If you drive with the mouse over the individual characteristics of the two boxplots, their values are hidden. The characteristic values must be tapped on touch screens.
        </i>
    </p>
    <p>
        The
        <span style="color:green">
            green
        </span>
        Auxiliary lines that you can activate using the checkbox will show you that the characteristic values are identical.
    </p>
    <hr/>
    <p>
        The following checklist is an overview of the parameters of the boxplots. The green hooks indicate that the respective values of both boxplots match. If you click on the parameters, you will see a statement.
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>6</falsenextnode>
                <falseanswernote>prt1-6-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <!-- HIER DIE GRAFIK -->
    <hr/>
    <p>
        In der folgenden Abbildung sehen Sie unten den
        <span class="oer-aufgabe-23_farbe_unten">
            in der Aufgabe gegebenen Boxplot
        </span>
        . Dar&#252;ber sehen Sie die von Ihnen angegebenen Daten inkl. des
        <span class="oer-aufgabe-23_farbe_oben">
            sich daraus ergebenen Boxplots
        </span>
        .




[[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der Antwort




const datapoints_y = 2; // y-Position der Datenpunkte




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints_y+0.4);




const mini_global = {#float(mini_global)#};
const ampl_global = {#float(ampl_global)#};
const maxi_global = {#float(maxi_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#};
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#};




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global-0.25*ampl_global, highest_position+0.5, maxi_global+0.2*ampl_global, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                    }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ====================================================
// ================ Boxplot aus der Antwort ================
// ====================================================




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
        <br/>
        aus Ihrer
        <br/>
        Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse2_y],[uquantil_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse2_y],[antenne_rechts_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height_ans/2}],[med_ans,function(){return achse2_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});
// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};




// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
        <br/>
        aus der
        <br/>
        Aufgaben-
        <br/>
        stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




// ====================================================
// === Die Tabellenzeilen ausblenden, wo die Werte &#252;bereinstimmen ===
// ====================================================
if(antenne_links_ans=={#antenne_links#}){
            document.getElementById('oer-aufgabe-23_zeile_antenne_links').style.display="none";
            document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').childNodes[0].value="{#antenne_links#}";
            document.getElementById('oer-aufgabe-23_antenne_links_antwort').childNodes[0].value="{#antenne_links#}";
};
if({#uquantil_ans#}=={#uquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_uquartil').style.display="none";
            document.getElementById('oer-aufgabe-23_uquartil_aufgabe').childNodes[0].value="{#uquantil#}";
            document.getElementById('oer-aufgabe-23_uquartil_antwort').childNodes[0].value="{#uquantil#}";
};
if({#med_ans#}=={#med#}){
            document.getElementById('oer-aufgabe-23_zeile_median').style.display="none";
            document.getElementById('oer-aufgabe-23_median_aufgabe').childNodes[0].value="{#med#}";
            document.getElementById('oer-aufgabe-23_median_antwort').childNodes[0].value="{#med#}";
};
if({#oquantil_ans#}=={#oquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_oquartil').style.display="none";
            document.getElementById('oer-aufgabe-23_oquartil_aufgabe').childNodes[0].value="{#oquantil#}";
            document.getElementById('oer-aufgabe-23_oquartil_antwort').childNodes[0].value="{#oquantil#}";
};
if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            document.getElementById('oer-aufgabe-23_zeile_antenne_rechts').style.display="none";
            document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').childNodes[0].value="{#antenne_rechts#}";
            document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').childNodes[0].value="{#antenne_rechts#}";
};




// === Erste Aufgabe ausblenden ===
hide('oer-aufgabe-23_aufgabe1');
[[/jsxgraph]]
        <p>
            <i>
                Wenn Sie mit der Maus &#252;ber die einzelnen Kennwerte der beiden Boxplots fahren, werden deren Werte eingeblendet. Auf Touch-Screens m&#252;ssen die Kennwerte angetippt werden.
            </i>
        </p>
        <p>
            Die Hilfslinien, die Sie mithilfe der Checkbox aktivieren k&#246;nnen, zeigen Ihnen, welche Kennwerte &#252;bereinstimmen (
            <span style="color:green">
                gr&#252;ne
            </span>
            Hilfslinien) und welche nicht (
            <span style="color:red">
                rote
            </span>
            Hilfslinien).
        </p>
        <hr/>
        <p>
            In der folgenden Checkliste k&#246;nnen Sie sehen, welche der Kennziffern &#252;bereinstimmen. Wenn Sie auf die Kenngr&#246;&#223;en klicken, wird Ihnen eine Erkl&#228;rung angezeigt.
        </p>
    </p>
</span>
<span class="multilang" lang="en">
    <!-- HIER DIE GRAFIK -->
    <hr/>
    <p>
        In the following picture, see below the
        <span class="oer-aufgabe-23_farbe_unten">
            in the task
        </span>
        . You can see the data you provide including the
        <span class="oer-aufgabe-23_farbe_oben">
            resulting boxplots
        </span>
        .




[[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der Antwort




const datapoints_y = 2; // y-Position der Datenpunkte




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints_y+0.4);




const mini_global = {#float(mini_global)#};
const ampl_global = {#float(ampl_global)#};
const maxi_global = {#float(maxi_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#};
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#};




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global-0.25*ampl_global, highest_position+0.5, maxi_global+0.2*ampl_global, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                    }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ====================================================
// ================ Boxplot aus der Antwort ================
// ====================================================




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
        <br/>
        aus Ihrer
        <br/>
        Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse2_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse2_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse2_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse2_y],[uquantil_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse2_y],[antenne_rechts_ans,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height_ans/2}],[med_ans,function(){return achse2_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse2_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});
// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};




// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
        <br/>
        aus der
        <br/>
        Aufgaben-
        <br/>
        stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse2_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




// ====================================================
// === Die Tabellenzeilen ausblenden, wo die Werte &#252;bereinstimmen ===
// ====================================================
if(antenne_links_ans=={#antenne_links#}){
            document.getElementById('oer-aufgabe-23_zeile_antenne_links').style.display="none";
            document.getElementById('oer-aufgabe-23_antenne_links_aufgabe').childNodes[0].value="{#antenne_links#}";
            document.getElementById('oer-aufgabe-23_antenne_links_antwort').childNodes[0].value="{#antenne_links#}";
};
if({#uquantil_ans#}=={#uquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_uquartil').style.display="none";
            document.getElementById('oer-aufgabe-23_uquartil_aufgabe').childNodes[0].value="{#uquantil#}";
            document.getElementById('oer-aufgabe-23_uquartil_antwort').childNodes[0].value="{#uquantil#}";
};
if({#med_ans#}=={#med#}){
            document.getElementById('oer-aufgabe-23_zeile_median').style.display="none";
            document.getElementById('oer-aufgabe-23_median_aufgabe').childNodes[0].value="{#med#}";
            document.getElementById('oer-aufgabe-23_median_antwort').childNodes[0].value="{#med#}";
};
if({#oquantil_ans#}=={#oquantil#}){
            document.getElementById('oer-aufgabe-23_zeile_oquartil').style.display="none";
            document.getElementById('oer-aufgabe-23_oquartil_aufgabe').childNodes[0].value="{#oquantil#}";
            document.getElementById('oer-aufgabe-23_oquartil_antwort').childNodes[0].value="{#oquantil#}";
};
if({#antenne_rechts_ans#}=={#antenne_rechts#}){
            document.getElementById('oer-aufgabe-23_zeile_antenne_rechts').style.display="none";
            document.getElementById('oer-aufgabe-23_antenne_rechts_antwort').childNodes[0].value="{#antenne_rechts#}";
            document.getElementById('oer-aufgabe-23_antenne_rechts_aufgabe').childNodes[0].value="{#antenne_rechts#}";
};




// === Erste Aufgabe ausblenden ===
hide('oer-aufgabe-23_aufgabe1');
[[/jsxgraph]]
        <p>
            <i>
                If you drive with the mouse over the individual characteristics of the two boxplots, their values are hidden. The characteristic values must be tapped on touch screens.
            </i>
        </p>
        <p>
            The help lines that you can activate using the checkbox will show you which characteristics match (
            <span style="color:green">
                green
            </span>
            and which are not (
            <span style="color:red">
                Red
            </span>
            Aid lines).
        </p>
        <hr/>
        <p>
            In the following checklist you can see which of the identifiers match. If you click on the parameters, you will see a statement.
        </p>
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>6</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenne_links_ans</sans>
                <tans>antenne_links</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.2000000</truescore>
                <truepenalty/>
                <truenextnode>7</truenextnode>
                <trueanswernote>prt1-7-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Linke Antenne
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Left antenna
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>7</falsenextnode>
                <falseanswernote>prt1-7-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Linke Antenne
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Left antenna
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>7</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>uquantil_ans</sans>
                <tans>uquantil</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.2000000</truescore>
                <truepenalty/>
                <truenextnode>8</truenextnode>
                <trueanswernote>prt1-8-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Unteres Quartil
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Lower quartile
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>8</falsenextnode>
                <falseanswernote>prt1-8-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Unteres Quartil
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Lower quartile
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>8</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>med_ans</sans>
                <tans>med</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.2000000</truescore>
                <truepenalty/>
                <truenextnode>10</truenextnode>
                <trueanswernote>prt1-9-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>9</falsenextnode>
                <falseanswernote>prt1-9-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>9</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>arit_ans</sans>
                <tans>med</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>10</truenextnode>
                <trueanswernote>prt1-10-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
        <br/>
        <i>
            Stattdessen stimmt das
            <i>
                arithmetische Mittel
            </i>
            Ihrer Daten aber mit dem im gegebenen Boxplot eingezeichneten Median &#252;berein. Kann es sein, dass Sie die beiden verwechselt haben?
        </i>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
        <br/>
        <i>
            Instead,
            <i>
                arithmetic means
            </i>
            Your data however agree with the median shown in the given boxplot. Can it be that you confused the two?
        </i>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>10</falsenextnode>
                <falseanswernote>prt1-10-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
        </prt>
        <prt>
            <name>prt1_neu</name>
            <value>1.0000000</value>
            <autosimplify>1</autosimplify>
            <feedbackstyle>0</feedbackstyle>
            <feedbackvariables>
                <text><![CDATA[/*
=== Bedeutung der Knoten: ===
1. Ist die Antwort eine Liste?
2. Sind die angegebenen Werte alle unterschiedlich?
3. Sind nur Zahlen dabei, mit denen JSXGraph was anfangen kann? (kein pi, e, sqrt(),...)
4. Wurde eine Liste mit den Kenngr&#246;&#223;en angegeben?
5. Ist die L&#228;nge der Liste in Ordnung? (Und Wiederholung des Datensatzes aus ans1_neu)
6. Ist die gesamte Aufgabe richtig? (F&#252;r grafisches Feedback)
7. Stimmt die linke Antenne?
8 Stimmt das untere Quartil?
9. Stimmt der Median?
    10. Falls 9 = falsch: Stimmt vielleicht das arithmetische Mittel von ans1_neu mit dem Median des gegebenen Box-Plots &#252;berein?
11. Stimmt das obere Quartil?
12. Stimmt die rechte Antenne?
13. Ist die Anzahl der oberen Ausrei&#223;er gleich null?
    14: Falls 13=false: Entspricht der obere Ausrei&#223;er denn der rechten Antenne des Boxplots aus der Aufgabenstellung?
15. Ist die Anzahl der unteren Ausrei&#223;er gleich null?
    16: Falls 15=false: Entspricht der untere Ausrei&#223;er denn der linken Antenne des Boxplots aus der Aufgabenstellung?
17. Benachrichtigung &#252;ber das Erreichen des Endes der Aufgabe
18. Nochmal Grafik mit den ersten beiden Boxplots (wenn STOP bei Knoten 1-5)
*/

/* ===========================
F&#252;r letzte Antwort (ans1_neu)
============================== */

/* Sortierte Liste mit den Datenpunkten:*/
L2: sort(float(map(fullratsimp,ans1_neu)));
anspunkte: makelist([L2[k],3],k,1,length(L2)); /*Datenpunkte*/

/*Kennwerte:*/
mini_ans: lmin(L2); /*Minimum des Boxplots aus der Antwort*/
maxi_ans: lmax(L2); /*Maximum des Boxplots aus der Antwort*/
med_ans: median1(L2); /*Median des Boxplots aus der Antwort*/
arit_ans: apply("+",L2)/length(L2); /*arithmetisches Mittel des Boxplots aus der Antwort*/
ampl_ans: maxi_ans-mini_ans; /*Spannweite des Boxplots aus der Antwort*/
uquantil_ans: pquantil(L2,1/4); /*Unteres Quartil des Boxplots aus der Antwort*/
oquantil_ans: pquantil(L2,3/4); /*Oberes Quartil des Boxplots aus der Antwort*/
IQR_ans: oquantil_ans-uquantil_ans; /*IQR des Boxplots aus der Antwort*/

/*Ausrei&#223;er:*/
ausreisser_unten_ans: sublist(L2,lambda([x],x<uquantil_ans-3/2*IQR_ans)); /*Untere Ausrei&#223;er des Boxplots aus der Antwort*/
ausreisser_oben_ans: sublist(L2,lambda([x],x>oquantil_ans+3/2*IQR_ans)); /*Obere Ausrei&#223;er des Boxplots aus der Antwort*/
ausreisser_punkte_ans: block([L], /*Ausrei&#223;er des Boxplots aus der Antwort oben und unten (Punkte)*/
  L:[],
  if not(ausreisser_oben_ans=[]) then L:cons([last(L2),3],L), /*f&#252;gt L oberen Ausrei&#223;er hinzu, wenn es einen gibt*/
  if not(ausreisser_unten_ans=[]) then L:cons([first(L2),3],L), /*f&#252;gt L unteren Ausrei&#223;er hinzu, wenn es einen gibt*/
    return(L)
);
ausreisser_punkte_x_ans: makelist(ausreisser_punkte_ans[k][1],k,1,length(ausreisser_punkte_ans));

/* Bestimmt, ob es einen oberen/unteren Ausrei&#223;er gibt und legt dadurch fest,
was die obere/untere Antenne des Boxplots aus der Antwort ist: */
antenne_rechts_ans: if ausreisser_oben_ans=[] then last(L2) else lmax(sublist(L2, lambda([x],x<=oquantil_ans+3/2*IQR_ans)));
antenne_links_ans: if ausreisser_unten_ans=[] then first(L2) else lmin(sublist(L2, lambda([x],x>=uquantil_ans-3/2*IQR_ans)));

/* ===========================
F&#252;r erste Antwort (ans1_copy)
============================== */

/* Sortierte Liste mit den Datenpunkten*/
L2_1: sort(float(map(fullratsimp,ans1_copy))); 
anspunkte_1: makelist([L2_1[k],3],k,1,length(L2_1)); /*Datenpunkte*/

/*Kennwerte:*/
mini_ans_1: lmin(L2_1); /*Minimum des Boxplots aus der Antwort*/
maxi_ans_1: lmax(L2_1); /*Maximum des Boxplots aus der Antwort*/
med_ans_1: median1(L2_1); /*Median des Boxplots aus der Antwort*/
arit_ans_1: apply("+",L2_1)/length(L2_1); /*arithmetisches Mittel des Boxplots aus der Antwort*/
ampl_ans_1: maxi_ans_1-mini_ans_1; /*Spannweite des Boxplots aus der Antwort*/
uquantil_ans_1: pquantil(L2_1,1/4); /*Unteres Quartil des Boxplots aus der Antwort*/
oquantil_ans_1: pquantil(L2_1,3/4); /*Oberes Quartil des Boxplots aus der Antwort*/
IQR_ans_1: oquantil_ans_1-uquantil_ans_1; /*IQR des Boxplots aus der Antwort*/

/*Ausrei&#223;er:*/
ausreisser_unten_ans_1: sublist(L2_1,lambda([x],x<uquantil_ans_1-3/2*IQR_ans_1)); /*Untere Ausrei&#223;er des Boxplots aus der Antwort*/
ausreisser_oben_ans_1: sublist(L2_1,lambda([x],x>oquantil_ans_1+3/2*IQR_ans_1)); /*Obere Ausrei&#223;er des Boxplots aus der Antwort*/
ausreisser_punkte_ans_1: block([L], /*Ausrei&#223;er des Boxplots aus der Antwort oben und unten (Punkte)*/
  L:[],
  if not(ausreisser_oben_ans_1=[]) then L:cons([last(L2_1),3],L), /*f&#252;gt L oberen Ausrei&#223;er hinzu, wenn es einen gibt*/
  if not(ausreisser_unten_ans_1=[]) then L:cons([first(L2_1),3],L), /*f&#252;gt L unteren Ausrei&#223;er hinzu, wenn es einen gibt*/
    return(L)
);
ausreisser_punkte_x_ans_1: makelist(ausreisser_punkte_ans_1[k][1],k,1,length(ausreisser_punkte_ans_1));

/* Bestimmt, ob es einen oberen/unteren Ausrei&#223;er gibt und legt dadurch fest,
was die obere/untere Antenne des Boxplots aus der Antwort ist: */
antenne_rechts_ans_1: if ausreisser_oben_ans_1=[] then last(L2_1) else lmax(sublist(L2_1, lambda([x],x<=oquantil_ans_1+3/2*IQR_ans_1)));
antenne_links_ans_1: if ausreisser_unten_ans_1=[] then first(L2_1) else lmin(sublist(L2_1, lambda([x],x>=uquantil_ans_1-3/2*IQR_ans_1)));

/* ================================
F&#252;r sonstige Elemente in der Grafik
=================================== */

/*Globales Minimum, Maximum und globale Spannweite f&#252;r die "boundingbox" des Boards in der Grafik:*/
mini_global: min(mini,mini_ans);
maxi_global: max(maxi,maxi_ans);
ampl_global: max(ampl, ampl_ans);
mini_global_1: min(mini,mini_ans,mini_ans_1);
maxi_global_1: max(maxi,maxi_ans,maxi_ans_1);
ampl_global_1: max(ampl, ampl_ans, ampl_ans_1);

/*Minimum und Maximum ohne Ber&#252;cksichtigung der aktuellen Antwort (f&#252;r Wiederholungsknoten)*/
mini_global_w: min(mini,mini_ans_1);
maxi_global_w: max(maxi,maxi_ans_1);
ampl_global_w: max(ampl, ampl_ans_1);

/*F&#252;r Ausrei&#223;er in der Grafik:*/
ausreisser_oben_wert_ans: if length(ausreisser_oben_ans)>0 then last(ausreisser_oben_ans) else "keiner";
ausreisser_unten_wert_ans: if length(ausreisser_unten_ans)>0 then first(ausreisser_unten_ans) else "keiner";

/*Liste mit Werten, die Studierende genannt haben, die keine reellen Zahlen sind.*/
enthaltene_strings: sublist(L2,lambda([x], stringp(x)));
L2_ohne_strings: sublist(L2,lambda([y],not(stringp(y))));
sonstige_verbotene_zahlen: sublist(L2_ohne_strings,lambda([x],
        not(constantp(x)) or imagpart(x)#0 or setp(x) or listp(x)
    )
);
verboteneZahlen: append(enthaltene_strings,sonstige_verbotene_zahlen);

/*&#220;berpr&#252;fen, ob Ausrei&#223;er existieren (f&#252;r Grafik):*/
antenneXausreisser_oben: if ausreisser_oben_wert_ans="keiner" then is(ausreisser_oben_wert=antenne_rechts_ans) else is(ausreisser_oben_wert_ans=antenne_rechts);
antenneXausreisser_unten: if ausreisser_unten_wert_ans="keiner" then is(ausreisser_unten_wert=antenne_links_ans) else is(ausreisser_unten_wert_ans=antenne_links);]]></text>
            </feedbackvariables>
            <node>
                <name>0</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>listp(ans1_neu)</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>=</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>1</truenextnode>
                <trueanswernote>prt1_neu-1-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <script>
        window.addEventListener('load', function (){
                hide('oer-aufgabe-23_aufgabe1_prt');
});
    </script>
</span>
<span class="multilang" lang="en">
    <script>
        window.addEventListener('load', function (){
                hide('oer-aufgabe-23_aufgabe1_prt');
});
    </script>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>=</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>17</falsenextnode>
                <falseanswernote>prt1_neu-1-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <p>
        Ihre eingegebene Antwort ist keine Liste in der Form
        <code>
            [a,b,c,...]
        </code>
    </p>
    <p>
        Bitte geben Sie eine Liste an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
    <script>
        window.addEventListener('load', function (){
                hide('oer-aufgabe-23_aufgabe1_prt');
});
    </script>
</span>
<span class="multilang" lang="en">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <p>
        Your entered reply is not a list in the form
        <code>
            [a,b,c,...]
        </code>
    </p>
    <p>
        Please enter a list and then click "Check" again.
    </p>
    <script>
        window.addEventListener('load', function (){
                hide('oer-aufgabe-23_aufgabe1_prt');
});
    </script>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>1</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ans1_neu)</sans>
                <tans>length(unique(ans1_neu))</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>2</truenextnode>
                <trueanswernote>prt1_neu-2-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>17</falsenextnode>
                <falseanswernote>prt1_neu-2-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <p>
        Ihre Liste sollte nur unterschiedliche Werte enthalten
    </p>
    <p>
        Bitte geben Sie eine Liste unterschiedlicher Werte an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <p>
        Your list should contain only different values
    </p>
    <p>
        Please enter a list of different values and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>10</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>oquantil_ans</sans>
                <tans>oquantil</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.1000000</truescore>
                <truepenalty/>
                <truenextnode>11</truenextnode>
                <trueanswernote>prt1_neu-11-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Oberes Quartil
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Upper quartile
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>11</falsenextnode>
                <falseanswernote>prt1_neu-11-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Oberes Quartil
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;obere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 75 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Upper quartile
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>11</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenne_rechts_ans</sans>
                <tans>antenne_rechts</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.1000000</truescore>
                <truepenalty/>
                <truenextnode>12</truenextnode>
                <trueanswernote>prt1_neu-12-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Rechte Antenne
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Antenna
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>12</falsenextnode>
                <falseanswernote>prt1_neu-12-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Rechte Antenne
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;rechte Antenne&lt;/b&gt; erstreckt sich nach rechts zum gr&#246;&#223;ten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Antenna
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>12</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ausreisser_oben_ans)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>14</truenextnode>
                <trueanswernote>prt1_neu-13-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.1000000</falsescore>
                <falsepenalty/>
                <falsenextnode>13</falsenextnode>
                <falseanswernote>prt1_neu-13-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <br/>
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        Im Boxplot aus der Aufgabenstellung ist kein maximaler Wert als Ausrei&#223;er eingezeichnet. Der Boxplot, der sich aus Ihren Daten ergibt, hat aber einen solchen Wert.
    </p>
</span>
<span class="multilang" lang="en">
    <br/>
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        In the box plot from the task, no maximum value is entered as an outlier. The boxplot, which results from your data, has such a value.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>13</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenneXausreisser_oben</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>14</truenextnode>
                <trueanswernote>prt1_neu-14-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Der obere Ausrei&#223;er aus Ihrem Datensatz stammt aber mit der rechten Antenne des Boxplots aus der Aufgabenstellung &#252;berein (in der Grafik durch
        <span style="color:orange">
            gelbe
        </span>
        Hilfslinien dargestellt).
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        The upper outlier from your dataset comes in agreement with the right antenna of the boxplot from the task position (in the graphic by
        <span style="color:orange">
            Yellow
        </span>
        Aid lines shown).
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>14</falsenextnode>
                <falseanswernote>prt1_neu-14-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>14</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(ausreisser_unten_ans)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>16</truenextnode>
                <trueanswernote>prt1_neu-15-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.1000000</falsescore>
                <falsepenalty/>
                <falsenextnode>15</falsenextnode>
                <falseanswernote>prt1_neu-15-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        Im Boxplot aus der Aufgabenstellung ist kein minimaler Wert als Ausrei&#223;er eingezeichnet. Der Boxplot, der sich aus Ihren Daten ergibt, hat aber einen solchen Wert.
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        <span style="font-size: 1em; color:red;">
            <i class="fa fa-exclamation">
            </i>
        </span>
        In the boxplot from the task, no minimum value is entered as an outlier. The boxplot, which results from your data, has such a value.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>15</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenneXausreisser_unten</sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>16</truenextnode>
                <trueanswernote>prt1_neu-16-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Der untere Ausrei&#223;er aus Ihrem Datensatz stammt aber mit der linken Antenne des Boxplots aus der Aufgabenstellung &#252;berein (in der Grafik durch
        <span style="color:orange">
            gelbe
        </span>
        Hilfslinien dargestellt).
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        The lower outlier from your dataset comes however with the left antenna of the boxplot from the task position (in the graphic by
        <span style="color:orange">
            Yellow
        </span>
        Aid lines shown).
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>16</falsenextnode>
                <falseanswernote>prt1_neu-16-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>16</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>[antenne_links_ans, antenne_rechts_ans, med_ans, uquantil_ans, oquantil_ans]</sans>
                <tans>[antenne_links, antenne_rechts, med, uquantil, oquantil]</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>-1</truenextnode>
                <trueanswernote>prt1_neu-17-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    [[ if test='is(length(ausreisser_unten_ans)#0 or length(ausreisser_oben_ans)#0)' ]]
    <hr/>
    <p>
        Bitte korrigieren Sie Ihre Eingabe und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
    [[ else ]]
    <hr/>
    <p>
        Herzlichen Gl&#252;ckwunsch, Sie sind am Ende der Aufgabe angelangt! Jetzt sollten Sie zu einem gegebenen Boxplot einen passenden Datensatz finden k&#246;nnen.
    </p>
    [[/ if ]]
</span>
<span class="multilang" lang="en">
    [[ if test='is(length(ausreisser_unten_ans)#0 or length(ausreisser_oben_ans)#0)' ]]
    <hr/>
    <p>
        Please correct your input and then click "Check" again.
    </p>
    [[ else ]]
    <hr/>
    <p>
        Congratulations, you have reached the end of the task! Now you should be able to find a matching record for a given boxplot.
    </p>
    [[/ if ]]
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1_neu-17-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <hr/>
    <p>
        Bitte korrigieren Sie Ihre Eingabe und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <hr/>
    <p>
        Please correct your input and then click "Check" again.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>17</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>1</sans>
                <tans>1</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>-1</truenextnode>
                <trueanswernote>prt1_neu-18-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <hr/>
    <p>
        Zur Erinnerung sehen Sie hier noch einmal die Werte und den
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot zu Ihrer allerersten Antwort {@ans1_copy@}
        </span>
        <button class="btn btn-link" onclick="copyToClipboard('['+{#ans1_copy#}+']')" style="padding:0;margin-right: -0.5%;" type="button">
            <i class="icon fa fa-solid fa-clipboard fa-fw copytoclipboard" data-placement="top" data-toggle="tooltip" title="In die Zwischenablage kopieren">
            </i>
        </button>
        . Darunter sehen Sie den
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot aus der Aufgabenstellung
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y_1 = 2; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4);




const mini_global_w = {#float(mini_global_w)#};
const ampl_global_w = {#float(ampl_global_w)#};
const maxi_global_w = {#float(maxi_global_w)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_w-0.2*ampl_global_w, highest_position+0.5, maxi_global_w+0.2*ampl_global_w, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                    y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der ersten Antwort ===========
// ===========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:upperColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:upperColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe_1
}) };








// ===========================================================
// ============= Boxplot aus der Aufgabenstellung ============
// ===========================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans_1,ende_hilfslinien],[antenne_links_ans_1,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans_1==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans_1,[uquantil_ans_1, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans_1.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height/2}],[med_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans_1==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans_1,[oquantil_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans_1.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans_1==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
</span>
<span class="multilang" lang="en">
    <hr/>
    <p>
        Here you can see the values and the
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot on your first answer {@ans1_copy@}
        </span>
        <button class="btn btn-link" onclick="copyToClipboard('['+{#ans1_copy#}+']')" style="padding:0;margin-right: -0.5%;" type="button">
            <i class="icon fa fa-solid fa-clipboard fa-fw copytoclipboard" data-placement="top" data-toggle="tooltip" title="In die Zwischenablage kopieren">
            </i>
        </button>
        . See below
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot from the task
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y_1 = 2; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse2_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4);




const mini_global_w = {#float(mini_global_w)#};
const ampl_global_w = {#float(ampl_global_w)#};
const maxi_global_w = {#float(maxi_global_w)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_w-0.2*ampl_global_w, highest_position+0.5, maxi_global_w+0.2*ampl_global_w, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                    y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der ersten Antwort ===========
// ===========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:upperColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:upperColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe_1
}) };








// ===========================================================
// ============= Boxplot aus der Aufgabenstellung ============
// ===========================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans_1,ende_hilfslinien],[antenne_links_ans_1,function(){return achse2_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans_1==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten  and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans_1,[uquantil_ans_1, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans_1.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height/2}],[med_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans_1==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans_1,[oquantil_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans_1.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height/2}],[antenne_rechts_ans_1,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans_1==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse2_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse2_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>-1</falsenextnode>
                <falseanswernote>prt1_neu-18-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>2</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>length(verboteneZahlen)</sans>
                <tans>0</tans>
                <testoptions/>
                <quiet>0</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>3</truenextnode>
                <trueanswernote>prt1_neu-3-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>17</falsenextnode>
                <falseanswernote>prt1_neu-3-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <p>
        Ihr Datensatz enth&#228;lt folgende Werte, die nicht ausgewertet werden konnten:
    </p>
    \[ {@sequenceify(verboteneZahlen)@} \]
    <p>
        Bitte geben Sie eine Liste reeller Zahlen an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <p>
        Your dataset contains the following values that could not be evaluated:
    </p>
    \[ {@sequenceify(verboteneZahlen)@} \]
    <p>
        Please enter a list of real numbers and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>3</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>L2</sans>
                <tans>list_indicators</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>17</truenextnode>
                <trueanswernote>prt1_neu-4-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p>
        Es sieht so aus, als h&#228;tten Sie die Kenngr&#246;&#223;en bestimmt.
    </p>
    <p>
        Bitte geben einen Datensatz an, der zu dem gegebenen Boxplot passt. Klicken Sie dann wieder auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p>
        It looks like you've determined the parameters.
    </p>
    <p>
        Please specify a record that matches the given boxplot. Then click "Check" again.
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>4</falsenextnode>
                <falseanswernote>prt1_neu-4-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>4</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans><![CDATA[is(length(ans1_neu)>=8)]]></sans>
                <tans>true</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>5</truenextnode>
                <trueanswernote>prt1_neu-5-T</trueanswernote>
                <truefeedback format="html">
                    <text/>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>17</falsenextnode>
                <falseanswernote>prt1_neu-5-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <p>
        Ihre Liste enth&#228;lt weniger als acht Werte.
    </p>
    <p>
        Bitte geben Sie eine Liste mit mindestens acht unterschiedlichen Werten an und klicken Sie dann erneut auf "Pr&#252;fen".
    </p>
</span>
<span class="multilang" lang="en">
    <p class="incorrect">
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <p>
        Your list contains less than eight values.
    </p>
    <p>
        Please enter a list with at least eight different values and then click "Check".
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>5</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>[antenne_links_ans, antenne_rechts_ans, med_ans, uquantil_ans, oquantil_ans]</sans>
                <tans>[antenne_links, antenne_rechts, med, uquantil, oquantil]</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.5000000</truescore>
                <truepenalty/>
                <truenextnode>6</truenextnode>
                <trueanswernote>prt1_neu-6-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    [[ if test='is(length(ausreisser_unten_ans)=0 and length(ausreisser_oben_ans)=0)' ]]
    <p class="correct">
        <span style="font-size: 1.5em; color:green;">
            <i class="fa fa-check">
            </i>
        </span>
        Richtige Antwort, gut gemacht!
    </p>
    [[ else ]]
    <p class="partiallycorrect">
        <span style="font-size: 1.5em; color:orange;">
            <i class="fa fa-adjust">
            </i>
        </span>
        Ihre Antwort ist teilweise korrekt.
    </p>
    [[/ if ]]
    <p>
        In der folgenden Abbildung sehen Sie oben die von Ihnen angegebenen Daten und den zugeh&#246;rigen
        <span class="oer-aufgabe-23_farbe_mitte_2">
            Boxplot aus Ihrer ersten Antwort {@ans1_copy@}
        </span>
        . In der Mitte sehen Sie die Daten  und den
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot aus Ihrer letzten Antwort {@ans1_neu@}
        </span>
        . Ganz unten sehen Sie den
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot aus der Aufgabenstellung
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#AD6DEB'; // Farbe des Boxplots aus der zweiten Antwort: lila
const middleColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red';  // Farbe Datenpunkte letzte Antwort
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;








// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_mitte_2').forEach(el=&gt;el.style.color=middleColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 4; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const achse3_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus letzten Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der letzten Antwort
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der letzten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y = 2; // y-Position der Datenpunkte aus der letzten Antwort
const datapoints2_y_1 = 4; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse3_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y+0.4);




const mini_global_1 = {#float(mini_global_1)#};
const ampl_global_1 = {#float(ampl_global_1)#};
const maxi_global_1 = {#float(maxi_global_1)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_1-0.2*ampl_global_1, highest_position+0.5, maxi_global_1+0.2*ampl_global_1, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der letzten Antwort ==========
// ===========================================================




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse3_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    letzten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse3 = board.create('axis', [[0, achse3_y], [1, achse3_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse3_y],[uquantil_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse3_y],[antenne_rechts_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height_ans/2}],[med_ans,function(){return achse3_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse3_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints2_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
}) };








// ========================================================
// ================ Boxplot aus der ersten Antwort ========
// ========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans_1 = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:middleColor, highlight:false});
beschriftung_ans_1.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans_1.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:middleColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:middleColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:middleColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:middleColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: ================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse3_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse3_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse3_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            Wenn Sie mit der Maus &#252;ber die einzelnen Kennwerte der beiden Boxplots fahren, werden deren Werte eingeblendet. Auf Touch-Screens m&#252;ssen die Kennwerte angetippt werden.
        </i>
    </p>
    <p>
        Die
        <span style="color:green">
            gr&#252;nen
        </span>
        Hilfslinien, die Sie mithilfe der Checkbox aktivieren k&#246;nnen, zeigen Ihnen, dass die Kennwerte jeweils &#252;bereinstimmen.
    </p>
    <hr/>
    <p>
        Die folgende Checkliste ist eine &#220;bersicht &#252;ber die Kennziffern der Boxplots. Die gr&#252;nen Haken kennzeichnen, dass die jeweiligen Werte beider Boxplots &#252;bereinstimmen. Wenn Sie auf die Kenngr&#246;&#223;en klicken, wird Ihnen eine Erkl&#228;rung angezeigt.
    </p>
</span>
<span class="multilang" lang="en">
    [[ if test='is(length(ausreisser_unten_ans)=0 and length(ausreisser_oben_ans)=0)' ]]
    <p class="correct">
        <span style="font-size: 1.5em; color:green;">
            <i class="fa fa-check">
            </i>
        </span>
        Right answer, well done!
    </p>
    [[ else ]]
    <p class="partiallycorrect">
        <span style="font-size: 1.5em; color:orange;">
            <i class="fa fa-adjust">
            </i>
        </span>
        Your answer is partly correct.
    </p>
    [[/ if ]]
    <p>
        In the following picture, you can see the data you provide above and the associated data
        <span class="oer-aufgabe-23_farbe_mitte_2">
            Boxplot from your first answer {@ans1_copy@}
        </span>
        . In the middle you see the data and the
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot from your last answer {@ans1_neu@}
        </span>
        . Below you can see
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot from the task
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#AD6DEB'; // Farbe des Boxplots aus der zweiten Antwort: lila
const middleColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red';  // Farbe Datenpunkte letzte Antwort
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;








// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_mitte_2').forEach(el=&gt;el.style.color=middleColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 4; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const achse3_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus letzten Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der letzten Antwort
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der letzten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y = 2; // y-Position der Datenpunkte aus der letzten Antwort
const datapoints2_y_1 = 4; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse3_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y+0.4);




const mini_global_1 = {#float(mini_global_1)#};
const ampl_global_1 = {#float(ampl_global_1)#};
const maxi_global_1 = {#float(maxi_global_1)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#float(ausreisser_punkte_x_ans)#};
const datapoints_x_array = {#float(L2)#};
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_1-0.2*ampl_global_1, highest_position+0.5, maxi_global_1+0.2*ampl_global_1, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der letzten Antwort ==========
// ===========================================================




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse3_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    letzten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse3 = board.create('axis', [[0, achse3_y], [1, achse3_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse3_y],[uquantil_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse3_y],[antenne_rechts_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height_ans/2}],[med_ans,function(){return achse3_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse3_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
            })
};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints2_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
}) };








// ========================================================
// ================ Boxplot aus der ersten Antwort ========
// ========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans_1 = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:middleColor, highlight:false});
beschriftung_ans_1.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans_1.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:middleColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:middleColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:middleColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:middleColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// ====================================================
// ============= Boxplot aus der Aufgabenstellung =============
// ====================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: ================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse3_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse3_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse3_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            If you drive with the mouse over the individual characteristics of the two boxplots, their values are hidden. The characteristic values must be tapped on touch screens.
        </i>
    </p>
    <p>
        The
        <span style="color:green">
            green
        </span>
        Auxiliary lines that you can activate using the checkbox will show you that the characteristic values are identical.
    </p>
    <hr/>
    <p>
        The following checklist is an overview of the parameters of the boxplots. The green hooks indicate that the respective values of both boxplots match. If you click on the parameters, you will see a statement.
    </p>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>6</falsenextnode>
                <falseanswernote>prt1_neu-6-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <p class="incorrect">
        &gt;
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Falsche Antwort.
    </p>
    <hr/>
    <p>
        In der folgenden Abbildung sehen Sie oben die von Ihnen angegebenen Daten und den zugeh&#246;rigen
        <span class="oer-aufgabe-23_farbe_mitte_2">
            Boxplot aus Ihrer ersten Antwort {@ans1_copy@}
        </span>
        . In der Mitte sehen Sie die Daten  und den
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot aus Ihrer letzten Antwort {@ans1_neu@}
        </span>
        . Ganz unten sehen Sie den
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot aus der Aufgabenstellung
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#AD6DEB'; // Farbe des Boxplots aus der zweiten Antwort: lila
const middleColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red';  // Farbe Datenpunkte letzte Antwort
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_mitte_2').forEach(el=&gt;el.style.color=middleColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 4; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const achse3_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus letzten Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der letzten Antwort
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der letzten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y = 2; // y-Position der Datenpunkte aus der letzten Antwort
const datapoints2_y_1 = 4; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse3_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y+0.4);




const mini_global_1 = {#float(mini_global_1)#};
const ampl_global_1 = {#float(ampl_global_1)#};
const maxi_global_1 = {#float(maxi_global_1)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#ausreisser_punkte_x_ans#};
const datapoints_x_array = {#L2#}; 
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_1-0.2*ampl_global_1, highest_position+0.5, maxi_global_1+0.2*ampl_global_1, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der letzten Antwort ==========
// ===========================================================




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse3_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    letzten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse3 = board.create('axis', [[0, achse3_y], [1, achse3_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse3_y],[uquantil_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse3_y],[antenne_rechts_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height_ans/2}],[med_ans,function(){return achse3_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse3_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints2_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// =========================================================
// ================ Boxplot aus der ersten Antwort =========
// =========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans_1 = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:middleColor, highlight:false});
beschriftung_ans_1.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans_1.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:middleColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:middleColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:middleColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:middleColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// =========================================================
// ============= Boxplot aus der Aufgabenstellung ==========
// =========================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse3_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse3_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse3_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            Wenn Sie mit der Maus &#252;ber die einzelnen Kennwerte der beiden Boxplots fahren, werden deren Werte eingeblendet. Auf Touch-Screens m&#252;ssen die Kennwerte angetippt werden.
        </i>
    </p>
    <p>
        Die Hilfslinien, die Sie mithilfe der Checkbox aktivieren k&#246;nnen, zeigen Ihnen, welche Kennwerte &#252;bereinstimmen (
        <span style="color:green">
            gr&#252;ne
        </span>
        Hilfslinien) und welche nicht (
        <span style="color:red">
            rote
        </span>
        Hilfslinien).
    </p>
    <hr/>
    <p>
        In der folgenden Checkliste k&#246;nnen Sie sehen, welche der Kennziffern &#252;bereinstimmen. Wenn Sie auf die Kenngr&#246;&#223;en klicken, wird Ihnen eine Erkl&#228;rung angezeigt.
    </p>
</span>
<span class="multilang" lang="en">
    <p class="incorrect">
        &gt;
        <span style="font-size: 1.5em; color:red;">
            <i class="fa fa-times">
            </i>
        </span>
        Wrong answer.
    </p>
    <hr/>
    <p>
        In the following picture, you can see the data you provide above and the associated data
        <span class="oer-aufgabe-23_farbe_mitte_2">
            Boxplot from your first answer {@ans1_copy@}
        </span>
        . In the middle you see the data and the
        <span class="oer-aufgabe-23_farbe_oben_2">
            Boxplot from your last answer {@ans1_neu@}
        </span>
        . Below you can see
        <span class="oer-aufgabe-23_farbe_unten_2">
            Boxplot from the task
        </span>
        .
    </p>
    [[jsxgraph]]
JXG.Options.line.strokeWidth = 2;
JXG.Options.line.dash = 1;
JXG.Options.line.straightFirst = false;
JXG.Options.segment.dash = 0;




// Verwendete Farben:
const upperColor = '#AD6DEB'; // Farbe des Boxplots aus der zweiten Antwort: lila
const middleColor = '#5d330d'; // Farbe des Boxplots aus der ersten Antwort: braun
const lowerColor = '#0000bb'; //Farbe des unteren Boxplots aus der Aufgabenstellung: blau
const datenpunkte_farbe ='red';  // Farbe Datenpunkte letzte Antwort
const datenpunkte_farbe_1 ='red'; // Farbe Datenpunkte erste Antwort
const labelBackgroundColor2 = getComputedStyle(document.querySelector(".stackprtfeedback-prt1_neu",null)).background;




// &#196;ndert Schriftfarbe der "Legende"
document.querySelectorAll('.oer-aufgabe-23_farbe_oben_2').forEach(el=&gt;el.style.color=upperColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_mitte_2').forEach(el=&gt;el.style.color=middleColor);
document.querySelectorAll('.oer-aufgabe-23_farbe_unten_2').forEach(el=&gt;el.style.color=lowerColor);




const boxplot_height = 1.2; // H&#246;he des Boxplots aus der Aufgabenstellung
const antennen_height = 0.6; // H&#246;he der Antennen des Boxplots aus der Aufgabenstellung




const achse2_y = 4; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus der ersten Antwort)
const achse3_y = 2; // y-Position der zweiten x-Achse (f&#252;r den Boxplot aus letzten Antwort)
const boxplot_height_ans = 1.2; // H&#246;he des Boxplots aus der letzten Antwort
const boxplot_height_ans_1 = 1.2; // H&#246;he des Boxplots aus der ersten Antwort
const antennen_height_ans = 0.6; // H&#246;he der Antennen des Boxplots aus der letzten Antwort
const antennen_height_ans_1 = 0.6; // H&#246;he der Antennen des Boxplots aus der ersten Antwort




const datapoints2_y = 2; // y-Position der Datenpunkte aus der letzten Antwort
const datapoints2_y_1 = 4; // y-Position der Datenpunkte aus der ersten Antwort




const ende_hilfslinien = -1.3; // Unteres Ende der Hilfslinien




const highest_position = Math.max(achse3_y+0.5*boxplot_height+0.4, datapoints2_y_1+0.4,achse2_y+0.5*boxplot_height+0.4, datapoints2_y+0.4);




const mini_global_1 = {#float(mini_global_1)#};
const ampl_global_1 = {#float(ampl_global_1)#};
const maxi_global_1 = {#float(maxi_global_1)#};
const mini_global = {#float(mini_global)#};
const uquantil_ans = {#float(uquantil_ans)#};
const oquantil_ans = {#float(oquantil_ans)#};
const antenne_links_ans = {#float(antenne_links_ans)#};
const antenne_rechts_ans = {#float(antenne_rechts_ans)#};
const med_ans = {#float(med_ans)#};
const ausreisser_x_array = {#ausreisser_punkte_x_ans#};
const datapoints_x_array = {#L2#}; 
const uquantil_ans_1 = {#float(uquantil_ans_1)#};
const oquantil_ans_1 = {#float(oquantil_ans_1)#};
const antenne_links_ans_1 = {#float(antenne_links_ans_1)#};
const antenne_rechts_ans_1 = {#float(antenne_rechts_ans_1)#};
const med_ans_1 = {#float(med_ans_1)#};
const ausreisser_x_array_1 = {#ausreisser_punkte_x_ans_1#};
const datapoints_x_array_1 = {#L2_1#}; 
const uquantil = {#float(uquantil)#};
const oquantil = {#float(oquantil)#};
const antenne_links = {#float(antenne_links)#};
const antenne_rechts = {#float(antenne_rechts)#};
const med = {#float(med)#}
const ausreisser_oben_wert_ans = {#float(ausreisser_oben_wert_ans)#};
const ausreisser_unten_wert_ans = {#float(ausreisser_unten_wert_ans)#}; 




const board = JXG.JSXGraph.initBoard(divid, {
                axis:true,
                boundingbox: [mini_global_1-0.2*ampl_global_1, highest_position+0.5, maxi_global_1+0.2*ampl_global_1, -2],
                showCopyright:false,
				showNavigation:false,
                defaultAxes:{
                                x:{lastArrow:false,
                                                ticks:{drawZero:true}
                                },
                                y:{lastArrow:false,
                                                visible:false,
                                                ticks:{drawLabels:false, drawZero:true}
                                }
                }
});




// === Anstatt der automatisch angezeigten Koordinaten f&#252;r Punkte soll das Label in der Form "Wert = X" erscheinen ===
board.highlightInfobox = function(x,y,el) {
                this.infobox.setText('Wert = ' + x);
                this.infobox.rendNode.style.color = 'black';
                this.infobox.rendNode.style.padding = '5px';
                this.infobox.rendNode.style.backgroundColor = 'white';
};




// === Checkboxes ===
const checkbox = board.create('checkbox',[mini_global,-1.5, 'Zeige/verberge Datenpunkte'],{checked:true, fixed:true});
const checkbox_Linien = board.create('checkbox',[mini_global,-1.8, 'Zeige/verberge Hilfslinien'],{checked:false, fixed:true});




// ===========================================================
// ================ Boxplot aus der letzten Antwort ==========
// ===========================================================




// === Beschriftung oberer Boxplot ===
const beschriftung_ans = board.create('text',[board.getBoundingBox()[0],achse3_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    letzten
    <br/>
    Antwort'],{fixed:true, color:upperColor, highlight:false});
beschriftung_ans.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans.rendNode.style.padding="3px";




// === Obere Achse ===
const achse3 = board.create('axis', [[0, achse3_y], [1, achse3_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans = board.create('point',[uquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const pulans = board.create('point',[uquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});
const porans = board.create('point',[oquantil_ans,function(){return achse3_y+boxplot_height_ans/2}],{visible:false,fixed:true});
const purans = board.create('point',[oquantil_ans,function(){return achse3_y-boxplot_height_ans/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text = board.create('text',[antenne_links_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_links_ans = board.create('segment',[[antenne_links_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_links_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans.on('over', function(e){
                grenze_links_ans_text.setAttribute({visible:true});
});
grenze_links_ans.on('out', function(e){
                grenze_links_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive = false;
grenze_links_ans.on('down', function(e){
                if(grenze_links_ansActive){
                                grenze_links_ans_text.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text.setAttribute({visible:true});
                }
                grenze_links_ansActive = !grenze_links_ansActive;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text = board.create('text',[antenne_rechts_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans}],{visible:false,fixed:true,color:upperColor});
const grenze_rechts_ans = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height_ans/2}],[antenne_rechts_ans,function(){return achse3_y+antennen_height_ans/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans.on('over', function(e){
                grenze_rechts_ans_text.setAttribute({visible:true});
});
grenze_rechts_ans.on('out', function(e){
                grenze_rechts_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive = false;
grenze_rechts_ans.on('down', function(e){
                if(grenze_rechts_ansActive){
                                grenze_rechts_ans_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text.setAttribute({visible:true});
                }
                grenze_rechts_ansActive = !grenze_rechts_ansActive;
});




// === Grundlinien ===
const grundlinie_links_ans = board.create('segment',[[antenne_links_ans,achse3_y],[uquantil_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});
const grundlinie_rechts_ans = board.create('segment',[[oquantil_ans,achse3_y],[antenne_rechts_ans,achse3_y]],{
                fixed:true, strokeColor:upperColor, highlight:false
});




// === Median ===
const median_ans_text = board.create('text',[med_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Median = '+med_ans}],{visible:false,fixed:true,color:upperColor});
const median_ans = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height_ans/2}],[med_ans,function(){return achse3_y+boxplot_height_ans/2}]],{
                fixed:true, strokeColor:upperColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans.on('over', function(e){
                median_ans_text.setAttribute({visible:true});
});
median_ans.on('out', function(e){
                median_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive = false;
median_ans.on('down', function(e){
                if(median_ansActive){
                                median_ans_text.setAttribute({visible:false});
                } else{
                                median_ans_text.setAttribute({visible:true});
                }
                median_ansActive = !median_ansActive;
});




// === Box ===
const uquantil_ans_text = board.create('text',[uquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans}],{visible:false,fixed:true,color:upperColor});
const oquantil_ans_text = board.create('text',[oquantil_ans-1,function(){return achse3_y+boxplot_height_ans/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans}],{visible:false,fixed:true,color:upperColor});
const box_ans = board.create('polygon',[polans,porans,purans,pulans],{
                fillColor:upperColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:upperColor, highlightStrokeColor:'grey'}
});
box_ans.borders[2].setAttribute({highlight:false});
box_ans.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[3].on('over', function(e){
                uquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[3].on('out', function(e){
                uquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive = false;
box_ans.borders[3].on('down', function(e){
                if(uquantil_ansActive){
                                uquantil_ans_text.setAttribute({visible:false});
                } else{
                                uquantil_ans_text.setAttribute({visible:true});
                }
                uquantil_ansActive = !uquantil_ansActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans.borders[1].on('over', function(e){
                oquantil_ans_text.setAttribute({visible:true});
});
box_ans.borders[1].on('out', function(e){
                oquantil_ans_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive = false;
box_ans.borders[1].on('down', function(e){
                if(oquantil_ansActive){
                                oquantil_ans_text.setAttribute({visible:false});
                } else{
                                oquantil_ans_text.setAttribute({visible:true});
                }
                oquantil_ansActive = !oquantil_ansActive;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array){
            board.create('point',[j,achse3_y],{
                fixed:true,
                withLabel:false,
                color:upperColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array){board.create('point',[j, datapoints2_y],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// =========================================================
// ================ Boxplot aus der ersten Antwort =========
// =========================================================




// === Beschriftung mittlerer Boxplot ===
const beschriftung_ans_1 = board.create('text',[board.getBoundingBox()[0],achse2_y,'Boxplot
    <br/>
    aus Ihrer
    <br/>
    ersten
    <br/>
    Antwort'],{fixed:true, color:middleColor, highlight:false});
beschriftung_ans_1.rendNode.style.background=labelBackgroundColor2;
beschriftung_ans_1.rendNode.style.padding="3px";




// === Obere Achse ===
const achse2 = board.create('axis', [[0, achse2_y], [1, achse2_y]],{ticks:{drawLabels:false}, lastArrow:false});




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const polans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const pulans_1 = board.create('point',[uquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});
const porans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}],{visible:false,fixed:true});
const purans_1 = board.create('point',[oquantil_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_ans_text_1 = board.create('text',[antenne_links_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Linke Antenne = '+antenne_links_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_links_ans_1 = board.create('segment',[[antenne_links_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_links_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links_ans_1.on('over', function(e){
                grenze_links_ans_text_1.setAttribute({visible:true});
});
grenze_links_ans_1.on('out', function(e){
                grenze_links_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_links_ansActive_1 = false;
grenze_links_ans_1.on('down', function(e){
                if(grenze_links_ansActive_1){
                                grenze_links_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_links_ans_text_1.setAttribute({visible:true});
                }
                grenze_links_ansActive_1 = !grenze_links_ansActive_1;
});




// === Rechte Antenne ===
const grenze_rechts_ans_text_1 = board.create('text',[antenne_rechts_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts_ans_1}],{visible:false,fixed:true,color:middleColor});
const grenze_rechts_ans_1 = board.create('segment',[[antenne_rechts_ans_1,function(){return achse2_y-antennen_height_ans_1/2}],[antenne_rechts_ans_1,function(){return achse2_y+antennen_height_ans_1/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts_ans_1.on('over', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:true});
});
grenze_rechts_ans_1.on('out', function(e){
                grenze_rechts_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechts_ansActive_1 = false;
grenze_rechts_ans_1.on('down', function(e){
                if(grenze_rechts_ansActive_1){
                                grenze_rechts_ans_text_1.setAttribute({visible:false});
                } else{
                                grenze_rechts_ans_text_1.setAttribute({visible:true});
                }
                grenze_rechts_ansActive_1 = !grenze_rechts_ansActive_1;
});




// === Grundlinien ===
const grundlinie_links_ans_1 = board.create('segment',[[antenne_links_ans_1,achse2_y],[uquantil_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});
const grundlinie_rechts_ans_1 = board.create('segment',[[oquantil_ans_1,achse2_y],[antenne_rechts_ans_1,achse2_y]],{
                fixed:true, strokeColor:middleColor, highlight:false
});




// === Median ===
const median_ans_text_1 = board.create('text',[med_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Median = '+med_ans_1}],{visible:false,fixed:true,color:middleColor});
const median_ans_1 = board.create('segment',[[med_ans_1,function(){return achse2_y-boxplot_height_ans_1/2}],[med_ans_1,function(){return achse2_y+boxplot_height_ans_1/2}]],{
                fixed:true, strokeColor:middleColor
});
// Eventlistener f&#252;r Mouse-Hovering
median_ans_1.on('over', function(e){
                median_ans_text_1.setAttribute({visible:true});
});
median_ans_1.on('out', function(e){
                median_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let median_ansActive_1 = false;
median_ans_1.on('down', function(e){
                if(median_ansActive_1){
                                median_ans_text_1.setAttribute({visible:false});
                } else{
                                median_ans_text_1.setAttribute({visible:true});
                }
                median_ansActive_1 = !median_ansActive_1;
});




// === Box ===
const uquantil_ans_text_1 = board.create('text',[uquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Unteres Quartil = '+uquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const oquantil_ans_text_1 = board.create('text',[oquantil_ans_1-1,function(){return achse2_y+boxplot_height_ans_1/2+0.4},function(){return 'Oberes Quartil = '+oquantil_ans_1}],{visible:false,fixed:true,color:middleColor});
const box_ans_1 = board.create('polygon',[polans_1,porans_1,purans_1,pulans_1],{
                fillColor:middleColor,
                highlight:false,
                borders:{strokeWidth:2, strokeColor:middleColor, highlightStrokeColor:'grey'}
});
box_ans_1.borders[2].setAttribute({highlight:false});
box_ans_1.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[3].on('over', function(e){
                uquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[3].on('out', function(e){
                uquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantil_ansActive_1 = false;
box_ans_1.borders[3].on('down', function(e){
                if(uquantil_ansActive_1){
                                uquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                uquantil_ans_text_1.setAttribute({visible:true});
                }
                uquantil_ansActive_1 = !uquantil_ansActive_1;
});




// Eventlistener f&#252;r Mouse-Hovering
box_ans_1.borders[1].on('over', function(e){
                oquantil_ans_text_1.setAttribute({visible:true});
});
box_ans_1.borders[1].on('out', function(e){
                oquantil_ans_text_1.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantil_ansActive_1 = false;
box_ans_1.borders[1].on('down', function(e){
                if(oquantil_ansActive_1){
                                oquantil_ans_text_1.setAttribute({visible:false});
                } else{
                                oquantil_ans_text_1.setAttribute({visible:true});
                }
                oquantil_ansActive_1 = !oquantil_ansActive_1;
});




// === Ausrei&#223;er-Punkte ===
for(let j of ausreisser_x_array_1){
            board.create('point',[j,achse2_y],{
                fixed:true,
                withLabel:false,
                color:middleColor,
                showInfobox:false
})};




// === Datenpunkte ===
for(let j of datapoints_x_array_1){board.create('point',[j, datapoints2_y_1],{
            withLabel:false,
            fixed:true,
            face:'x',
            visible:function(){return checkbox.Value()},
            color:datenpunkte_farbe
})};








// =========================================================
// ============= Boxplot aus der Aufgabenstellung ==========
// =========================================================




// === Beschriftung unterer Boxplot ===
const beschriftung_aufg = board.create('text',[board.getBoundingBox()[0],0,'Boxplot
    <br/>
    aus der
    <br/>
    Aufgaben-
    <br/>
    stellung'],{fixed:true, color:lowerColor, highlight:false});
beschriftung_aufg.rendNode.style.background=labelBackgroundColor2;
beschriftung_aufg.rendNode.style.padding="3px";




// ==== Unsichtbare Punkte zur Konstruktion der Box ====
const pol = board.create('point',[uquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pul = board.create('point',[uquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});
const por = board.create('point',[oquantil,function(){return boxplot_height/2}],{visible:false,fixed:true});
const pur = board.create('point',[oquantil,function(){return 0-boxplot_height/2}],{visible:false,fixed:true});




// === Linke Antenne ===
const grenze_links_text = board.create('text',[antenne_links-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Linke Antenne = '+antenne_links}],{visible:false,fixed:true,color:lowerColor});
const grenze_links = board.create('segment',[[antenne_links,function(){return 0-antennen_height/2}],[antenne_links,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_links.on('over', function(e){
                grenze_links_text.setAttribute({visible:true});
});
grenze_links.on('out', function(e){
                grenze_links_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_linksActive = false;
grenze_links.on('down', function(e){
                if(grenze_linksActive){
                                grenze_links_text.setAttribute({visible:false});
                } else{
                                grenze_links_text.setAttribute({visible:true});
                }
                grenze_linksActive = !grenze_linksActive;
});




// === Rechte Antenne ===
const grenze_rechts_text = board.create('text',[antenne_rechts-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Rechte Antenne = '+antenne_rechts}],{visible:false,fixed:true,color:lowerColor});
const grenze_rechts = board.create('segment',[[antenne_rechts,function(){return 0-antennen_height/2}],[antenne_rechts,function(){return 0+antennen_height/2}]],{
                fixed:true,
                strokeWidth:3,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
grenze_rechts.on('over', function(e){
                grenze_rechts_text.setAttribute({visible:true});
});
grenze_rechts.on('out', function(e){
                grenze_rechts_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let grenze_rechtsActive = false;
grenze_rechts.on('down', function(e){
                if(grenze_rechtsActive){
                                grenze_rechts_text.setAttribute({visible:false});
                } else{
                                grenze_rechts_text.setAttribute({visible:true});
                }
                grenze_rechtsActive = !grenze_rechtsActive;
});




// === Grundlinien ===
const grundlinie_links = board.create('segment',[[antenne_links,0],[uquantil,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});
const grundlinie_rechts = board.create('segment',[[oquantil,0],[antenne_rechts,0]],{
                fixed:true,
                strokeColor:lowerColor,
                highlight:false
});




// === Median ===
const median_text = board.create('text',[med-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Median ='+med}],{visible:false,fixed:true,color:lowerColor});
const median = board.create('segment',[[med,function(){return 0-boxplot_height/2}],[med,function(){return 0+boxplot_height/2}]],{
                fixed:true,
                strokeColor:lowerColor
});
// Eventlistener f&#252;r Mouse-Hovering
median.on('over', function(e){
                median_text.setAttribute({visible:true});
});
median.on('out', function(e){
                median_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let medianActive = false;
median.on('down', function(e){
                if(medianActive){
                                median_text.setAttribute({visible:false});
                } else{
                                median_text.setAttribute({visible:true});
                }
                medianActive = !medianActive;
});




// === Box ===
const uquantil_text = board.create('text',[uquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Unteres Quartil = '+uquantil}],{visible:false,fixed:true,color:lowerColor});
const oquantil_text = board.create('text',[oquantil-1,function(){return 0+boxplot_height/2+0.4},function(){return 'Oberes Quartil = '+oquantil}],{visible:false,fixed:true,color:lowerColor});
const box = board.create('polygon',[pol,por,pur,pul],{
                fillColor:lowerColor,
                highlight:false,
                borders:{strokeWidth:2, highlightStrokeColor:'grey', strokeColor:lowerColor}
});
box.borders[2].setAttribute({highlight:false});
box.borders[0].setAttribute({highlight:false});
// Eventlistener f&#252;r Mouse-Hovering
box.borders[3].on('over', function(e){
                uquantil_text.setAttribute({visible:true});
});
box.borders[3].on('out', function(e){
                uquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let uquantilActive = false;
box.borders[3].on('down', function(e){
                if(uquantilActive){
                                uquantil_text.setAttribute({visible:false});
                } else{
                                uquantil_text.setAttribute({visible:true});
                }
                uquantilActive = !uquantilActive;
});




// Eventlistener f&#252;r Mouse-Hovering
box.borders[1].on('over', function(e){
                oquantil_text.setAttribute({visible:true});
});
box.borders[1].on('out', function(e){
                oquantil_text.setAttribute({visible:false});
});
// Eventlistener f&#252;r Touch
let oquantilActive = false;
box.borders[1].on('down', function(e){
                if(oquantilActive){
                                oquantil_text.setAttribute({visible:false});
                } else{
                                oquantil_text.setAttribute({visible:true});
                }
                oquantilActive = !oquantilActive;
});




// ===================================================
// ===================== Hilfslinien: =====================
// ===================================================
const grenze_links_ans_linie = board.create('segment',[[antenne_links_ans,ende_hilfslinien],[antenne_links_ans,function(){return achse3_y-antennen_height/2}]],{
                fixed:true,
                color:function(){if(antenne_links_ans==antenne_links){return 'green'} else{
                                if({#antenneXausreisser_unten and ausreisser_unten_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const uquartil_linie = board.create('segment',[pulans,[uquantil_ans, ende_hilfslinien]],{
                fixed:true,
                color:function(){if(polans.X()==pol.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const median_ans_linie = board.create('segment',[[med_ans,function(){return achse3_y-boxplot_height/2}],[med_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(med_ans==med){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const oquartil_linie = board.create('segment',[purans,[oquantil_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(porans.X()==por.X()){return 'green'} else{return 'red'}},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const grenze_rechts_ans_linie = board.create('segment',[[antenne_rechts_ans,function(){return achse3_y-antennen_height/2}],[antenne_rechts_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){if(antenne_rechts_ans==antenne_rechts){return 'green'} else{
                                if({#antenneXausreisser_oben and ausreisser_oben_wert_ans="keiner"#}){return 'orange'} else{return 'red'}
                }},
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_rechts_linie = board.create('segment',[[ausreisser_oben_wert_ans,achse3_y],[ausreisser_oben_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_oben#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});




const ausreisser_links_linie = board.create('segment',[[ausreisser_unten_wert_ans,achse3_y],[ausreisser_unten_wert_ans,ende_hilfslinien]],{
                fixed:true,
                color:function(){
                                if({#antenneXausreisser_unten#}){return 'orange'} else{return 'red'}
                },
                visible:function(){return checkbox_Linien.Value()},
                highlight:false,
                dash:1
});
[[/jsxgraph]]
    <p>
        <i>
            If you drive with the mouse over the individual characteristics of the two boxplots, their values are hidden. The characteristic values must be tapped on touch screens.
        </i>
    </p>
    <p>
        The help lines that you can activate using the checkbox will show you which characteristics match (
        <span style="color:green">
            green
        </span>
        and which are not (
        <span style="color:red">
            Red
        </span>
        Aid lines).
    </p>
    <hr/>
    <p>
        In the following checklist you can see which of the identifiers match. If you click on the parameters, you will see a statement.
    </p>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>6</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>antenne_links_ans</sans>
                <tans>antenne_links</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.1000000</truescore>
                <truepenalty/>
                <truenextnode>7</truenextnode>
                <trueanswernote>prt1_neu-7-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Linke Antenne
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Left antenna
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>7</falsenextnode>
                <falseanswernote>prt1_neu-7-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Linke Antenne
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Die &lt;b&gt;linke Antenne&lt;/b&gt; erstreckt sich nach links zum kleinsten Wert des Datensatzes, der h&#246;chstens 1,5 Interquartilsabst&#228;nde vom Kasten entfernt ist.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Left antenna
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>7</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>uquantil_ans</sans>
                <tans>uquantil</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.1000000</truescore>
                <truepenalty/>
                <truenextnode>8</truenextnode>
                <trueanswernote>prt1_neu-8-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Unteres Quartil
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Lower quartile
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>8</falsenextnode>
                <falseanswernote>prt1_neu-8-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Unteres Quartil
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Das &lt;b&gt;untere Quartil&lt;/b&gt; ist derjenige Wert aus dem Datensatz, f&#252;r den gilt, dass 25 % aller Werte kleiner als dieser oder gleich diesem sind. Analog zum Median kann auch hier eine Mittelwertbildung stattfinden.&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Lower quartile
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
            <node>
                <name>8</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>med_ans</sans>
                <tans>med</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.1000000</truescore>
                <truepenalty/>
                <truenextnode>10</truenextnode>
                <trueanswernote>prt1_neu-9-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:green;">
                <i class="fa fa-check">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>9</falsenextnode>
                <falseanswernote>prt1_neu-9-F</falseanswernote>
                <falsefeedback format="html">
                    <text/>
                </falsefeedback>
            </node>
            <node>
                <name>9</name>
                <description/>
                <answertest>AlgEquiv</answertest>
                <sans>arit_ans</sans>
                <tans>med</tans>
                <testoptions/>
                <quiet>1</quiet>
                <truescoremode>+</truescoremode>
                <truescore>0.0000000</truescore>
                <truepenalty/>
                <truenextnode>10</truenextnode>
                <trueanswernote>prt1_neu-10-T</trueanswernote>
                <truefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
        <br/>
        <i>
            Stattdessen stimmt das
            <i>
                arithmetische Mittel
            </i>
            Ihrer Daten aber mit dem im gegebenen Boxplot eingezeichneten Median &#252;berein. Kann es sein, dass Sie die beiden verwechselt haben?
        </i>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
        <br/>
        <i>
            Instead,
            <i>
                arithmetic means
            </i>
            Your data however agree with the median shown in the given boxplot. Can it be that you confused the two?
        </i>
    </div>
</span>
]]></text>
                </truefeedback>
                <falsescoremode>-</falsescoremode>
                <falsescore>0.0000000</falsescore>
                <falsepenalty/>
                <falsenextnode>10</falsenextnode>
                <falseanswernote>prt1_neu-10-F</falseanswernote>
                <falsefeedback format="html">
                    <text><![CDATA[
<span class="multilang" lang="de">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                Median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
<span class="multilang" lang="en">
    <div class="collapsibleregioncaption">
        <a class="btn btn-link p-0" data-container="body" data-content='&lt;div class="no-overflow"&gt;
												&lt;p&gt;Der &lt;b&gt;Median&lt;/b&gt; ist derjenige Wert, der in der geordneten Liste genau in der Mitte liegt bzw. das arithmetische Mittel aus den beiden in der Mitte liegenden Werten (falls die Anzahl der Werte gerade ist).&lt;/p&gt;
												&lt;/div&gt;' data-html="true" data-original-title="" data-placement="right" data-toggle="popover" data-trigger="focus" role="button" tabindex="0" title="">
            <span class="popover_erklaerung">
                median
            </span>
            <span style="font-size: 1em; color:red;">
                <i class="fa fa-times">
                </i>
            </span>
        </a>
    </div>
</span>
]]></text>
                </falsefeedback>
            </node>
        </prt>
    </question>
    

</quiz>